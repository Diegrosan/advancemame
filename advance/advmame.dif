diff -U 5 --new-file --recursive src.ori/advance.pat src/advance.pat
--- src.ori/advance.pat	1970-01-01 01:00:00.000000000 +0100
+++ src/advance.pat	2003-09-06 16:25:17.000000000 +0200
@@ -0,0 +1 @@
+These files are patched for the use with the Advance emulator.
diff -U 5 --new-file --recursive src.ori/common.c src/common.c
--- src.ori/common.c	2003-08-09 02:53:08.000000000 +0200
+++ src/common.c	2003-09-06 16:25:17.000000000 +0200
@@ -414,17 +414,11 @@
 	coin_counter_w - sets input for coin counter
 -------------------------------------------------*/
 
 void coin_counter_w(int num,int on)
 {
-	if (num >= COIN_COUNTERS) return;
-	/* Count it only if the data has changed from 0 to non-zero */
-	if (on && (lastcoin[num] == 0))
-	{
-		coins[num]++;
-	}
-	lastcoin[num] = on;
+	/* moved in update_input_ports */
 }
 
 
 /*-------------------------------------------------
 	coin_lockout_w - locks out one coin input
@@ -733,10 +727,11 @@
 /*-------------------------------------------------
 	save_screen_snapshot_as - save a snapshot to
 	the given filename
 -------------------------------------------------*/
 
+#if 0 /* AdvanceMAME has its snapshot code */
 void save_screen_snapshot_as(mame_file *fp, struct mame_bitmap *bitmap)
 {
 	struct rectangle bounds;
 	struct mame_bitmap *osdcopy;
 	UINT32 saved_rgb_components[3];
@@ -815,17 +810,19 @@
 
 	/* if the OSD system allocated a bitmap; free it */
 	if (osdcopy)
 		bitmap_free(osdcopy);
 }
+#endif
 
 
 
 /*-------------------------------------------------
 	save_screen_snapshot - save a screen snapshot
 -------------------------------------------------*/
 
+#if 0 /* AdvanceMAME has its snapshot code */
 void save_screen_snapshot(struct mame_bitmap *bitmap)
 {
 	char name[20];
 	mame_file *fp;
 
@@ -845,10 +842,11 @@
 	{
 		save_screen_snapshot_as(fp, bitmap);
 		mame_fclose(fp);
 	}
 }
+#endif
 
 
 
 /***************************************************************************
 
@@ -1202,11 +1200,11 @@
 		}
 		else
 			strcat(romdata->errorbuf, "WARNING: the game might not run correctly.\n");
 
 		/* display the result */
-		printf("%s", romdata->errorbuf);
+		osd_display_loading_rom_message(romdata->errorbuf, 0);
 
 		/* if we're not getting out of here, wait for a keypress */
 		if (!options.gui_host && !bailing)
 		{
 			int k;
diff -U 5 --new-file --recursive src.ori/cpmame.mak src/cpmame.mak
--- src.ori/cpmame.mak	2003-05-15 04:59:00.000000000 +0200
+++ src/cpmame.mak	2003-09-06 16:25:17.000000000 +0200
@@ -15,10 +15,11 @@
 
 # SOUNDs
 SOUNDS+=YM2151_ALT@
 SOUNDS+=OKIM6295@
 SOUNDS+=QSOUND@
+SOUNDS+=DISCRETE@
 
 DRVLIBS = $(OBJ)/cps.a
 
 $(OBJ)/cps.a: \
 	$(OBJ)/machine/kabuki.o \
diff -U 5 --new-file --recursive src.ori/cpu/e132xs/e132xs.c src/cpu/e132xs/e132xs.c
--- src.ori/cpu/e132xs/e132xs.c	2003-09-03 22:05:58.000000000 +0200
+++ src/cpu/e132xs/e132xs.c	2003-09-07 22:18:18.000000000 +0200
@@ -529,11 +529,11 @@
 //other bits are reversed, in particular 7 - 5 for the operating system.
 //the user program can only changes the above 2 flags
 
 
 #define GET_CONST_RR(const_val, pc)					\
-	INT16 tmp;										\
+	{ INT16 tmp;										\
 	PC += 2;										\
 	tmp = READ_OP(PC);								\
 	if( E_BIT(tmp) )								\
 	{												\
 		INT16 tmp2;									\
@@ -551,13 +551,13 @@
 		const_val = tmp & 0x3fff;					\
 		if( S_BIT_CONST(tmp) )						\
 		{											\
 			const_val |= 0xffffc000;				\
 		}											\
+	} \
 	}
 
-
 static UINT8 e132xs_reg_layout[] =
 {
 	E132XS_PC,  E132XS_SR,  E132XS_FER, E132XS_SP,  E132XS_UB,  -1,
 	E132XS_BCR, E132XS_ISR, E132XS_FCR, E132XS_MCR, -1,
 	E132XS_TR,  E132XS_TPR, E132XS_TCR, E132XS_WCR, -1,
@@ -1242,12 +1242,13 @@
 			if( divisor == 0 || dividend > 0xffffffff )
 			{
 				//Rd//Rdf -> undefined
 				//Z -> undefined
 				//N -> undefined
+				UINT32 addr;
 				SET_V(1);
-				UINT32 addr = get_trap_addr(RANGE_ERROR);
+				addr = get_trap_addr(RANGE_ERROR);
 				execute_trap(addr);
 			}
 			else
 			{
 				UINT32 quotient, remainder;
@@ -1312,12 +1313,13 @@
 			if( divisor == 0 || dividend > 0xffffffff || (dividend_high & 0x80000000) )
 			{
 				//Rd//Rdf -> undefined
 				//Z -> undefined
 				//N -> undefined
+				UINT32 addr;
 				SET_V(1);
-				UINT32 addr = get_trap_addr(RANGE_ERROR);
+				addr = get_trap_addr(RANGE_ERROR);
 				execute_trap(addr);
 			}
 			else
 			{
 				INT32 quotient, remainder;
diff -U 5 --new-file --recursive src.ori/cpu/i8085/i8085.c src/cpu/i8085/i8085.c
--- src.ori/cpu/i8085/i8085.c	2003-09-03 22:05:58.000000000 +0200
+++ src/cpu/i8085/i8085.c	2003-09-06 16:25:17.000000000 +0200
@@ -80,10 +80,16 @@
  * 
  *****************************************************************************/
 
 /*int survival_prot = 0; */
 
+#if defined(__GNUC__) && __GNUC__ >= 3
+/* Disable all the asm macro and the big switch */
+#undef X86_ASM
+#define BIG_SWITCH 0
+#endif
+
 #define VERBOSE 0
 
 #include "driver.h"
 #include "state.h"
 #include "osd_cpu.h"
diff -U 5 --new-file --recursive src.ori/cpu/m68000/make68k.c src/cpu/m68000/make68k.c
--- src.ori/cpu/m68000/make68k.c	2003-06-09 20:34:00.000000000 +0200
+++ src/cpu/m68000/make68k.c	2003-09-06 16:25:17.000000000 +0200
@@ -188,11 +188,11 @@
 
 
 #define NORMAL 0
 #define PCREL  1
 
-#ifdef __ELF__
+#if defined(USE_OBJ_ELF)
 #define PREF ""
 #else
 #define PREF "_"
 #endif
 
@@ -249,17 +249,17 @@
 
 
 
 /* External register preservation */
 
-#ifdef DOS
+#if defined(USE_COMPILER_GNUC)
 
 /* Registers normally saved around C routines anyway */
 /* GCC 2.9.1 (dos) seems to preserve EBX,EDI and EBP */
 static char SavedRegs[] = "-B--SDB";
 
-#elif defined(WIN32)
+#elif defined(USE_COMPILER_VISUALC)
 
 /* visual C++, win32, says it preserves ebx, edi, esi, and ebp */
 /* ---------- VC++ deosn't preserve EDI? (Kenjo, 110399) ---------- */
 static char SavedRegs[] = "-B--S-B";
 
@@ -8037,11 +8037,11 @@
 	fprintf(fp, "\t\tDW   0,0,0\n\n");
 
 
 /* If Win32, put the table area in .data section (Kenjo) */
 
-#ifdef WIN32
+#if defined(USE_OS_WINDOWS)
 
 	fprintf(fp, "%s_OPCODETABLE\tTIMES  65536  DD 0\n\n", CPUtype);
 
 #else
 
diff -U 5 --new-file --recursive src.ori/cpu/z80/z80.c src/cpu/z80/z80.c
--- src.ori/cpu/z80/z80.c	2003-02-27 23:02:44.000000000 +0100
+++ src/cpu/z80/z80.c	2003-09-06 16:25:17.000000000 +0200
@@ -80,10 +80,16 @@
 
 #ifdef Z80_MSX
 #include "z80_msx.h"
 #endif
 
+#if defined(__GNUC__) && __GNUC__ >= 3
+/* Disable all the asm macro and the big switch */
+#undef X86_ASM
+#define BIG_SWITCH 0
+#endif
+
 #define VERBOSE 0
 
 #if VERBOSE
 #define LOG(x)	logerror x
 #else
diff -U 5 --new-file --recursive src.ori/cpuexec.c src/cpuexec.c
--- src.ori/cpuexec.c	2003-06-09 20:33:52.000000000 +0200
+++ src/cpuexec.c	2003-09-06 16:25:17.000000000 +0200
@@ -310,10 +310,13 @@
 	watchdog_counter = -1;
 
 	/* reset sound chips */
 	sound_reset();
 
+	/* reset the osd level */
+	osd_reset();
+
 	/* first pass over CPUs */
 	for (cpunum = 0; cpunum < cpu_gettotalcpu(); cpunum++)
 	{
 		/* enable all CPUs (except for audio CPUs if the sound is off) */
 		if (!(Machine->drv->cpu[cpunum].cpu_flags & CPU_AUDIO_CPU) || Machine->sample_rate != 0)
diff -U 5 --new-file --recursive src.ori/drivers/multi32.c src/drivers/multi32.c
--- src.ori/drivers/multi32.c	2003-09-03 22:06:02.000000000 +0200
+++ src/drivers/multi32.c	2003-09-06 16:25:26.000000000 +0200
@@ -711,11 +711,11 @@
 	MDRV_NVRAM_HANDLER(system32)
 
 	/* video hardware */
 	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN | VIDEO_UPDATE_AFTER_VBLANK | VIDEO_RGB_DIRECT | VIDEO_HAS_SHADOWS ) // RGB_DIRECT will be needed for alpha
 	MDRV_SCREEN_SIZE(52*8*2, 28*8*2)
-	MDRV_VISIBLE_AREA(0*8, 52*8*2-1, 0*8, 28*8*2-1)
+	MDRV_VISIBLE_AREA(0, 320-1, 0, 224-1)
 
 	MDRV_GFXDECODE(gfxdecodeinfo)
 	MDRV_PALETTE_LENGTH(32768)
 
 	MDRV_VIDEO_START(system32)
diff -U 5 --new-file --recursive src.ori/drivers/neogeo.c src/drivers/neogeo.c
--- src.ori/drivers/neogeo.c	2003-09-03 22:06:02.000000000 +0200
+++ src/drivers/neogeo.c	2003-09-06 16:25:26.000000000 +0200
@@ -386,11 +386,11 @@
 			}
 			fc++;
 		}
 
 		if (irq2control & IRQ2CTRL_ENABLE)
-			usrintf_showmessage("IRQ2 enabled, need raster driver");
+			/* usrintf_showmessage("IRQ2 enabled, need raster driver") */ ;
 
 		/* return a standard vblank interrupt */
 		vblank_int = 1;	   /* vertical blank */
 	}
 
diff -U 5 --new-file --recursive src.ori/fileio.c src/fileio.c
--- src.ori/fileio.c	2003-08-09 02:53:12.000000000 +0200
+++ src/fileio.c	2003-09-06 16:25:26.000000000 +0200
@@ -66,10 +66,11 @@
 	UINT64 offset;
 	UINT64 length;
 	UINT8 eof;
 	UINT8 type;
 	char hash[HASH_BUF_SIZE];
+	int back_char; /* Buffered char for unget. EOF for empty. */
 };
 
 
 
 /***************************************************************************
@@ -306,10 +307,13 @@
 	mame_fread
 ***************************************************************************/
 
 UINT32 mame_fread(mame_file *file, void *buffer, UINT32 length)
 {
+	/* flush any buffered char */
+	file->back_char = EOF;
+
 	/* switch off the file type */
 	switch (file->type)
 	{
 		case PLAIN_FILE:
 			return osd_fread(file->file, buffer, length);
@@ -339,10 +343,13 @@
 	mame_fwrite
 ***************************************************************************/
 
 UINT32 mame_fwrite(mame_file *file, const void *buffer, UINT32 length)
 {
+	/* flush any buffered char */
+	file->back_char = EOF;
+
 	/* switch off the file type */
 	switch (file->type)
 	{
 		case PLAIN_FILE:
 			return osd_fwrite(file->file, buffer, length);
@@ -359,10 +366,13 @@
 
 int mame_fseek(mame_file *file, INT64 offset, int whence)
 {
 	int err = 0;
 
+	/* flush any buffered char */
+	file->back_char = EOF;
+
 	/* switch off the file type */
 	switch (file->type)
 	{
 		case PLAIN_FILE:
 			return osd_fseek(file->file, offset, whence);
@@ -461,10 +471,16 @@
 
 int mame_fgetc(mame_file *file)
 {
 	unsigned char buffer;
 
+	if (file->back_char != EOF) {
+		buffer = file->back_char;
+		file->back_char = EOF;
+		return buffer;
+	}
+
 	/* switch off the file type */
 	switch (file->type)
 	{
 		case PLAIN_FILE:
 			if (osd_fread(file->file, &buffer, 1) == 1)
@@ -488,38 +504,13 @@
 	mame_ungetc
 ***************************************************************************/
 
 int mame_ungetc(int c, mame_file *file)
 {
-	/* switch off the file type */
-	switch (file->type)
-	{
-		case PLAIN_FILE:
-			if (osd_feof(file->file))
-			{
-				if (osd_fseek(file->file, 0, SEEK_CUR))
-					return c;
-			}
-			else
-			{
-				if (osd_fseek(file->file, -1, SEEK_CUR))
-					return c;
-			}
-			return EOF;
-
-		case RAM_FILE:
-		case ZIPPED_FILE:
-			if (file->eof)
-				file->eof = 0;
-			else if (file->offset > 0)
-			{
-				file->offset--;
-				return c;
-			}
-			return EOF;
-	}
-	return EOF;
+	file->back_char = c;
+  
+	return c;
 }
 
 
 
 /***************************************************************************
@@ -577,10 +568,14 @@
 	mame_feof
 ***************************************************************************/
 
 int mame_feof(mame_file *file)
 {
+	/* check for buffered chars */
+	if (file->back_char != EOF)
+		return 0;
+
 	/* switch off the file type */
 	switch (file->type)
 	{
 		case PLAIN_FILE:
 			return osd_feof(file->file);
@@ -806,10 +801,12 @@
 	LOG(("generic_fopen(%d, %s, %s, %s, %X)\n", pathc, gamename, filename, extension, flags));
 
 	/* reset the file handle */
 	memset(&file, 0, sizeof(file));
 
+	file.back_char = EOF;
+
 	/* check for incompatible flags */
 	if ((flags & FILEFLAG_OPENWRITE) && (flags & FILEFLAG_HASH))
 		fprintf(stderr, "Can't use HASH option with WRITE option in generic_fopen!\n");
 
 	/* determine start/stop based on reverse search flag */
diff -U 5 --new-file --recursive src.ori/inptport.c src/inptport.c
--- src.ori/inptport.c	2003-09-03 22:06:04.000000000 +0200
+++ src/inptport.c	2003-09-06 16:43:14.000000000 +0200
@@ -200,10 +200,13 @@
 	{ IPT_UI_SHOW_PROFILER,     "Show Profiler",		SEQ_DEF_2(KEYCODE_F11, KEYCODE_LSHIFT) },
 #ifdef MESS
 	{ IPT_UI_TOGGLE_UI,         "UI Toggle",			SEQ_DEF_1(KEYCODE_SCRLOCK) },
 #endif
 	{ IPT_UI_SNAPSHOT,          "Save Snapshot",		SEQ_DEF_1(KEYCODE_F12) },
+	{ IPT_UI_RECORD_START,      "Record Start", SEQ_DEF_2(KEYCODE_ENTER,KEYCODE_LCONTROL) },
+	{ IPT_UI_RECORD_STOP,       "Record Stop", SEQ_DEF_3(KEYCODE_ENTER,CODE_NOT,KEYCODE_LCONTROL) },
+	{ IPT_UI_TURBO,             "Turbo", SEQ_DEF_1(KEYCODE_ASTERISK) },
 	{ IPT_UI_TOGGLE_CHEAT,      "Toggle Cheat",			SEQ_DEF_1(KEYCODE_F6) },
 	{ IPT_UI_UP,                "UI Up",				SEQ_DEF_3(KEYCODE_UP, CODE_OR, JOYCODE_1_UP) },
 	{ IPT_UI_DOWN,              "UI Down",				SEQ_DEF_3(KEYCODE_DOWN, CODE_OR, JOYCODE_1_DOWN) },
 	{ IPT_UI_LEFT,              "UI Left",				SEQ_DEF_3(KEYCODE_LEFT, CODE_OR, JOYCODE_1_LEFT) },
 	{ IPT_UI_RIGHT,             "UI Right",				SEQ_DEF_3(KEYCODE_RIGHT, CODE_OR, JOYCODE_1_RIGHT) },
@@ -211,10 +214,12 @@
 	{ IPT_UI_CANCEL,            "UI Cancel",			SEQ_DEF_1(KEYCODE_ESC) },
 	{ IPT_UI_PAN_UP,            "Pan Up",				SEQ_DEF_3(KEYCODE_PGUP, CODE_NOT, KEYCODE_LSHIFT) },
 	{ IPT_UI_PAN_DOWN,          "Pan Down",				SEQ_DEF_3(KEYCODE_PGDN, CODE_NOT, KEYCODE_LSHIFT) },
 	{ IPT_UI_PAN_LEFT,          "Pan Left",				SEQ_DEF_2(KEYCODE_PGUP, KEYCODE_LSHIFT) },
 	{ IPT_UI_PAN_RIGHT,         "Pan Right",			SEQ_DEF_2(KEYCODE_PGDN, KEYCODE_LSHIFT) },
+	{ IPT_UI_MODE_NEXT,         "Mode Next",         SEQ_DEF_1(KEYCODE_STOP) },
+	{ IPT_UI_MODE_PRED,         "Mode Pred",         SEQ_DEF_1(KEYCODE_COMMA) },
 	{ IPT_UI_TOGGLE_DEBUG,      "Toggle Debugger",		SEQ_DEF_1(KEYCODE_F5) },
 	{ IPT_UI_SAVE_STATE,        "Save State",			SEQ_DEF_2(KEYCODE_F7, KEYCODE_LSHIFT) },
 	{ IPT_UI_LOAD_STATE,        "Load State",			SEQ_DEF_3(KEYCODE_F7, CODE_NOT, KEYCODE_LSHIFT) },
 	{ IPT_UI_ADD_CHEAT,			"Add Cheat",			SEQ_DEF_1(KEYCODE_A) },
 	{ IPT_UI_DELETE_CHEAT,		"Delete Cheat",			SEQ_DEF_1(KEYCODE_D) },
@@ -1795,10 +1800,11 @@
 		if (readint(f,&dispensed_tickets) != 0)
 			goto getout;
 
 		mixer_read_config(f);
 
+		osd_customize_inputport_current(Machine->input_ports);
 getout:
 		mame_fclose(f);
 	}
 
 	/* All analog ports need initialization */
@@ -2326,14 +2332,16 @@
 		int new, prev;
 
 		/* center stick */
 		if ((delta == 0) && (in->type & IPF_CENTER))
 		{
-			if (current > default_value)
-			delta = -100 / sensitivity;
-			if (current < default_value)
-			delta = 100 / sensitivity;
+			/* return backward at middle speed */
+			delta = default_value - current;
+			if (delta < -(keydelta+1)/2)
+				delta = -(keydelta+1)/2;
+			if (delta > (keydelta+1)/2)
+				delta = (keydelta+1)/2;
 		}
 
 		/* An analog joystick which is not at zero position (or has just */
 		/* moved there) takes precedence over all other computations */
 		/* analog_x/y holds values from -128 to 128 (yes, 128, not 127) */
@@ -2585,16 +2593,23 @@
 #define MAX_INPUT_BITS 1024
 	static int impulsecount[MAX_INPUT_BITS];
 	static int waspressed[MAX_INPUT_BITS];
 	static int pbwaspressed[MAX_INPUT_BITS];
 
+	unsigned newcoin[COIN_COUNTERS];
+	unsigned coin;
+
 #ifdef MAME_NET
 	int player;
 #endif /* MAME_NET */
 
 
 profiler_mark(PROFILER_INPUT);
+	
+	/* clear the new coin status */
+	for(coin=0;coin<COIN_COUNTERS;++coin)
+		newcoin[coin] = 0;
 
 	/* clear all the values before proceeding */
 	for (port = 0;port < MAX_INPUT_PORTS;port++)
 	{
 		input_port_value[port] = 0;
@@ -2689,29 +2704,35 @@
 				}
 				else
 				{
 					InputSeq* seq;
 					seq = input_port_seq(in);
-					if (seq_pressed(seq))
+					if (osd_input_port_filter(seq_pressed(seq), in->type & (IPF_PLAYERMASK | ~IPF_MASK)))
 					{
+						int ncoin;
 #ifdef MESS
 						if (((in->type & ~IPF_MASK) == IPT_KEYBOARD) && osd_keyboard_disabled())
 							continue;
 #endif
 
-						/* skip if coin input and it's locked out */
-						if ((in->type & ~IPF_MASK) >= IPT_COIN1 &&
-							(in->type & ~IPF_MASK) <= IPT_COIN4 &&
-                            coinlockedout[(in->type & ~IPF_MASK) - IPT_COIN1])
-						{
-							continue;
+						switch (in->type & ~IPF_MASK) {
+						case IPT_COIN1 : ncoin = 0; break;
+						case IPT_COIN2 : ncoin = 1; break;
+						case IPT_COIN3 : ncoin = 2; break;
+						case IPT_COIN4 : ncoin = 3; break;
+						case IPT_COIN5 : ncoin = 4; break;
+						case IPT_COIN6 : ncoin = 5; break;
+						case IPT_COIN7 : ncoin = 6; break;
+						case IPT_COIN8 : ncoin = 7; break;
+						default: ncoin = -1;
 						}
-						if ((in->type & ~IPF_MASK) >= IPT_COIN5 &&
-							(in->type & ~IPF_MASK) <= IPT_COIN8 &&
-                            coinlockedout[(in->type & ~IPF_MASK) - IPT_COIN5 + 4])
-						{
-							continue;
+						if (ncoin >= 0) {
+							if (coinlockedout[ncoin])
+								continue;
+							if (!lastcoin[ncoin])
+								++coins[ncoin];
+							newcoin[ncoin] = 1;
 						}
 
 						/* if IPF_RESET set, reset the first CPU */
 						if ((in->type & IPF_RESETCPU) && waspressed[ib] == 0 && !playback)
 						{
@@ -2842,10 +2863,14 @@
 #elif defined XMAME_NET
 	if ( osd_net_active() )
 		osd_net_sync(input_port_value, input_port_defaults);
 #endif /* MAME_NET */
 
+	/* set the last coin status */
+	for(coin=0;coin<COIN_COUNTERS;++coin)
+		lastcoin[coin] = newcoin[coin];
+
 profiler_mark(PROFILER_END);
 }
 
 
 
diff -U 5 --new-file --recursive src.ori/inptport.h src/inptport.h
--- src.ori/inptport.h	2003-09-03 22:06:04.000000000 +0200
+++ src/inptport.h	2003-09-06 16:25:26.000000000 +0200
@@ -87,10 +87,15 @@
 	IPT_OSD_4,
 	IPT_EXTENSION,	/* this is an extension on the previous InputPort, not a real inputport. */
 					/* It is used to store additional parameters for analog inputs */
 
 	/* the following are special codes for user interface handling - not to be used by drivers! */
+	IPT_UI_MODE_NEXT,
+	IPT_UI_MODE_PRED,
+	IPT_UI_RECORD_START,
+	IPT_UI_RECORD_STOP,
+	IPT_UI_TURBO,
 	IPT_UI_CONFIGURE,
 	IPT_UI_ON_SCREEN_DISPLAY,
 	IPT_UI_PAUSE,
 	IPT_UI_RESET_MACHINE,
 	IPT_UI_SHOW_GFX,
diff -U 5 --new-file --recursive src.ori/input.c src/input.c
--- src.ori/input.c	2003-09-03 22:06:04.000000000 +0200
+++ src/input.c	2003-09-06 16:25:26.000000000 +0200
@@ -812,11 +812,11 @@
 {
 	int pressed;
 
 	profiler_mark(PROFILER_INPUT);
 
-	pressed = seq_pressed(input_port_type_seq(code));
+	pressed = osd_input_ui_filter(seq_pressed(input_port_type_seq(code)),code);
 
 	if (pressed)
 	{
 		if (ui_map[code].memory == 0)
 		{
@@ -836,11 +836,11 @@
 	static int counter,inputdelay;
 	int pressed;
 
 	profiler_mark(PROFILER_INPUT);
 
-	pressed = seq_pressed(input_port_type_seq(code));
+	pressed = osd_input_ui_filter(seq_pressed(input_port_type_seq(code)),code);
 
 	if (pressed)
 	{
 		if (ui_map[code].memory == 0)
 		{
diff -U 5 --new-file --recursive src.ori/mame.c src/mame.c
--- src.ori/mame.c	2003-08-09 02:53:14.000000000 +0200
+++ src/mame.c	2003-09-06 16:25:26.000000000 +0200
@@ -983,26 +983,20 @@
 	to a given resolution
 -------------------------------------------------*/
 
 static void scale_vectorgames(int gfx_width, int gfx_height, int *width, int *height)
 {
-	double x_scale, y_scale, scale;
-
-	/* compute the scale values */
-	x_scale = (double)gfx_width / (double)(*width);
-	y_scale = (double)gfx_height / (double)(*height);
-
-	/* pick the smaller scale factor */
-	scale = (x_scale < y_scale) ? x_scale : y_scale;
-
-	/* compute the new size */
-	*width = (int)((double)*width * scale);
-	*height = (int)((double)*height * scale);
-
-	/* round to the nearest 4 pixel value */
-	*width &= ~3;
-	*height &= ~3;
+	if (Machine->orientation & ORIENTATION_SWAP_XY)
+	{
+		*width = gfx_height;
+		*height = gfx_width*9/16;
+	}
+	else
+	{
+		*width = gfx_width;
+		*height = gfx_height;
+	}
 }
 
 
 
 /*-------------------------------------------------
diff -U 5 --new-file --recursive src.ori/neomame.mak src/neomame.mak
--- src.ori/neomame.mak	2003-06-09 22:02:00.000000000 +0200
+++ src/neomame.mak	2003-09-06 16:25:26.000000000 +0200
@@ -8,10 +8,11 @@
 EMULATOR_EXE = neomame.exe
 
 # CPUs
 CPUS+=Z80@
 CPUS+=M68000@
+CPUS+=M68020@
 
 # SOUNDs
 SOUNDS+=AY8910@
 SOUNDS+=YM2610@
 
diff -U 5 --new-file --recursive src.ori/osdepend.h src/osdepend.h
--- src.ori/osdepend.h	2003-08-09 02:53:02.000000000 +0200
+++ src/osdepend.h	2003-09-06 16:25:26.000000000 +0200
@@ -391,10 +391,38 @@
       __attribute__ ((format (printf, 1, 2)));
 #else
 void CLIB_DECL logerror(const char *text,...);
 #endif
 
+/* called then the game is reset */
+void osd_reset(void);
+
+/* execute the specified menu (0,1,...) */
+int osd_menu(struct mame_bitmap *bitmap, int sel);
+
+/* filter the user interface input state */
+int osd_input_ui_filter(int result, int type);
+
+/* filter the main exit request */
+int osd_input_exit_filter(int result);
+
+/* filter the input port state */
+int osd_input_port_filter(int result, int type);
+
+/* snapshot saving */
+void osd_save_snapshot(void);
+
+/* start and stop the video/sound recording. */
+void osd_record_start(void);
+void osd_record_stop(void);
+
+/* customize the inputport after they are read from the .cfg file */
+void osd_customize_inputport_current(struct InputPort* current);
+
+/* handle the specific user interface */
+int osd_handle_user_interface(struct mame_bitmap *bitmap, int is_menu_active);
+
 #ifdef __cplusplus
 }
 #endif
 
 #endif
diff -U 5 --new-file --recursive src.ori/rules.mak src/rules.mak
--- src.ori/rules.mak	2003-09-03 22:06:06.000000000 +0200
+++ src/rules.mak	2003-09-06 16:25:26.000000000 +0200
@@ -1010,16 +1010,16 @@
 CPUOBJS += $(OBJ)/$(G6D)/g65816o1.o
 CPUOBJS += $(OBJ)/$(G6D)/g65816o2.o
 CPUOBJS += $(OBJ)/$(G6D)/g65816o3.o
 CPUOBJS += $(OBJ)/$(G6D)/g65816o4.o
 DBGOBJS += $(OBJ)/$(G6D)/g65816ds.o
-$(OBJ)/$(G6D)/g65816.o: $(G6D)/g65816.c $(G6D)/g65816.h $(G6D)/g65816cm.h $(G6D)/g65816op.h
-$(OBJ)/$(G6D)/g65816o0.o: $(G6D)/g65816o0.c $(G6D)/g65816.h $(G6D)/g65816cm.h $(G6D)/g65816op.h
-$(OBJ)/$(G6D)/g65816o1.o: $(G6D)/g65816o0.c $(G6D)/g65816.h $(G6D)/g65816cm.h $(G6D)/g65816op.h
-$(OBJ)/$(G6D)/g65816o2.o: $(G6D)/g65816o0.c $(G6D)/g65816.h $(G6D)/g65816cm.h $(G6D)/g65816op.h
-$(OBJ)/$(G6D)/g65816o3.o: $(G6D)/g65816o0.c $(G6D)/g65816.h $(G6D)/g65816cm.h $(G6D)/g65816op.h
-$(OBJ)/$(G6D)/g65816o4.o: $(G6D)/g65816o0.c $(G6D)/g65816.h $(G6D)/g65816cm.h $(G6D)/g65816op.h
+$(OBJ)/$(G6D)/g65816.o: g65816.c g65816.h g65816cm.h g65816op.h
+$(OBJ)/$(G6D)/g65816o0.o: g65816o0.c g65816.h g65816cm.h g65816op.h
+$(OBJ)/$(G6D)/g65816o1.o: g65816o0.c g65816.h g65816cm.h g65816op.h
+$(OBJ)/$(G6D)/g65816o2.o: g65816o0.c g65816.h g65816cm.h g65816op.h
+$(OBJ)/$(G6D)/g65816o3.o: g65816o0.c g65816.h g65816cm.h g65816op.h
+$(OBJ)/$(G6D)/g65816o4.o: g65816o0.c g65816.h g65816cm.h g65816op.h
 else
 CPUDEFS += -DHAS_G65816=0
 endif
 
 CPU=$(strip $(findstring SPC700@,$(CPUS)))
@@ -1027,11 +1027,11 @@
 SPCD = cpu/spc700
 OBJDIRS += $(OBJ)/$(SPCD)
 CPUDEFS += -DHAS_SPC700=1
 CPUOBJS += $(OBJ)/$(SPCD)/spc700.o
 DBGOBJS += $(OBJ)/$(SPCD)/spc700ds.o
-$(OBJ)/$(SPCD)/spc700/spc700.o: $(SPCD)/spc700.c $(SPCD)/spc700.h
+$(OBJ)/$(SPCD)/spc700.o: spc700.c spc700.h
 else
 CPUDEFS += -DHAS_SPC700=0
 endif
 
 CPU=$(strip $(findstring E132XS@,$(CPUS)))
@@ -1070,13 +1070,13 @@
 
 SOUND=$(strip $(findstring DISCRETE@,$(SOUNDS)))
 ifneq ($(SOUND),)
 SOUNDDEFS += -DHAS_DISCRETE=1
 SOUNDOBJS += $(OBJ)/sound/discrete.o
-$(OBJ)/sound/discrete.o: src/sound/discrete.c src/sound/discrete.h \
-		src/sound/disc_dev.c src/sound/disc_flt.c src/sound/disc_inp.c \
-		src/sound/disc_mth.c src/sound/disc_out.c src/sound/disc_wav.c
+$(OBJ)/sound/discrete.o: discrete.c discrete.h \
+		disc_dev.c disc_flt.c disc_inp.c \
+		disc_mth.c disc_out.c disc_wav.c
 else
 SOUNDDEFS += -DHAS_DISCRETE=0
 endif
 
 SOUND=$(strip $(findstring AY8910@,$(SOUNDS)))
diff -U 5 --new-file --recursive src.ori/sound/mixer.c src/sound/mixer.c
--- src.ori/sound/mixer.c	2003-05-15 04:59:00.000000000 +0200
+++ src/sound/mixer.c	2003-09-06 17:41:24.000000000 +0200
@@ -1054,14 +1054,17 @@
 {
 	UINT8 default_levels[MIXER_MAX_CHANNELS];
 	UINT8 mixing_levels[MIXER_MAX_CHANNELS];
 	int i;
 
-	memset(default_levels, 0xff, sizeof(default_levels));
-	memset(mixing_levels, 0xff, sizeof(mixing_levels));
-	mame_fread(f, default_levels, MIXER_MAX_CHANNELS);
-	mame_fread(f, mixing_levels, MIXER_MAX_CHANNELS);
+	if (mame_fread(f, default_levels, MIXER_MAX_CHANNELS) < MIXER_MAX_CHANNELS ||
+	    mame_fread(f, mixing_levels, MIXER_MAX_CHANNELS) < MIXER_MAX_CHANNELS)
+	{
+		memset(default_levels, 0xff, sizeof(default_levels));
+		memset(mixing_levels, 0xff, sizeof(mixing_levels));
+	}
+
 	for (i = 0; i < MIXER_MAX_CHANNELS; i++)
 	{
 		config_default_mixing_level[i] = default_levels[i];
 		config_mixing_level[i] = mixing_levels[i];
 	}
diff -U 5 --new-file --recursive src.ori/ui_text.c src/ui_text.c
--- src.ori/ui_text.c	2003-09-03 22:06:06.000000000 +0200
+++ src/ui_text.c	2003-09-06 16:25:26.000000000 +0200
@@ -240,10 +240,14 @@
 	"Restoration successful",
 	"Select a value",
 	"All values saved",
 	"One match found - added to list",
 
+	/* addendum */
+	"Center",
+	"Video",
+
 	NULL
 };
 
 int uistring_init (mame_file *langfile)
 {
diff -U 5 --new-file --recursive src.ori/ui_text.h src/ui_text.h
--- src.ori/ui_text.h	2003-09-03 22:06:06.000000000 +0200
+++ src/ui_text.h	2003-09-06 16:25:26.000000000 +0200
@@ -206,10 +206,14 @@
 	UI_search_OK,
 	UI_search_select_value,
 	UI_search_all_values_saved,
 	UI_search_one_match_found_added,
 
+	/* addendum */
+	UI_center,
+	UI_osdmenu,
+
 	UI_last_entry
 };
 
 struct lang_struct
 {
diff -U 5 --new-file --recursive src.ori/usrintrf.c src/usrintrf.c
--- src.ori/usrintrf.c	2003-09-03 22:06:06.000000000 +0200
+++ src/usrintrf.c	2003-09-06 16:25:26.000000000 +0200
@@ -853,12 +853,16 @@
 	while (items[i])
 	{
 		len = 3 + strlen(items[i]);
 		if (subitems && subitems[i])
 			len += 2 + strlen(subitems[i]);
-		if (len > maxlen && len <= highlen)
-			maxlen = len;
+		if (len > maxlen) {
+			if (len <= highlen)
+				maxlen = len;
+			else
+				maxlen = highlen;
+		}
 		i++;
 	}
 	count = i;
 
 	visible = uirotheight / (3 * uirotcharheight / 2) - 1;
@@ -926,15 +930,27 @@
 				dt[curr_dt].y = topoffs + (3*i+1)*uirotcharheight/2;
 				curr_dt++;
 			}
 			else
 			{
-				dt[curr_dt].text = items[item];
-				dt[curr_dt].color = UI_COLOR_NORMAL;
-				dt[curr_dt].x = (uirotwidth - uirotcharwidth * strlen(items[item])) / 2;
-				dt[curr_dt].y = topoffs + (3*i+1)*uirotcharheight/2;
-				curr_dt++;
+				unsigned y = topoffs + (3*i+1)*uirotcharheight/2;
+				int color = (flag && flag[item]) ? UI_COLOR_INVERSE : UI_COLOR_NORMAL;
+				len = strlen(items[item]);
+				if (len > maxlen - 3) {
+					unsigned x;
+					const char* dot = "...";
+					len = maxlen - 3;
+					x = (uirotwidth - uirotcharwidth * len) / 2;
+					ui_text_ex(bitmap,items[item],items[item] + len - 3,x,y,color);
+					ui_text_ex(bitmap,dot,dot+3,x + uirotcharwidth * (len - 3),y,color);
+				} else {
+					dt[curr_dt].text = items[item];
+					dt[curr_dt].color = color;
+					dt[curr_dt].x = (uirotwidth - uirotcharwidth * len) / 2;
+					dt[curr_dt].y = y;
+					curr_dt++;
+				}
 			}
 		}
 	}
 
 	i = selected - topitem;
@@ -1513,11 +1529,11 @@
 				}
 			}
 		}
 
 		if (input_ui_pressed(IPT_UI_SNAPSHOT))
-			save_screen_snapshot(bitmap);
+			osd_save_snapshot();
 	} while (!input_ui_pressed(IPT_UI_SHOW_GFX) &&
 			!input_ui_pressed(IPT_UI_CANCEL));
 
 	schedule_full_refresh();
 }
@@ -2062,13 +2078,13 @@
 		in++;
 	}
 
 	if (total == 0) return 0;
 
-	/* Each analog control has 3 entries - key & joy delta, reverse, sensitivity */
+	/* Each analog control has 4 entries - key & joy delta, reverse, sensitivity */
 
-#define ENTRIES 3
+#define ENTRIES 4
 
 	total2 = total * ENTRIES;
 
 	menu_item[total2] = ui_getstring (UI_returntomain);
 	menu_item[total2 + 1] = 0;	/* terminate array */
@@ -2081,15 +2097,17 @@
 		{
 			char label[30][40];
 			char setting[30][40];
 			int sensitivity,delta;
 			int reverse;
+			int center;
 
 			strcpy (label[i], input_port_name(entry[i/ENTRIES]));
 			sensitivity = IP_GET_SENSITIVITY(entry[i/ENTRIES]);
 			delta = IP_GET_DELTA(entry[i/ENTRIES]);
 			reverse = (entry[i/ENTRIES]->type & IPF_REVERSE);
+			center = (entry[i/ENTRIES]->type & IPF_CENTER);
 
 			strcat (label[i], " ");
 			switch (i%ENTRIES)
 			{
 				case 0:
@@ -2108,10 +2126,18 @@
 				case 2:
 					strcat (label[i], ui_getstring (UI_sensitivity));
 					sprintf(setting[i],"%3d%%",sensitivity);
 					if (i == sel) arrowize = 3;
 					break;
+				case 3:
+					strcat (label[i], ui_getstring (UI_center));
+					if (center)
+						strcpy(setting[i],ui_getstring (UI_on));
+					else
+						strcpy(setting[i],ui_getstring (UI_off));
+					if (i == sel) arrowize = 3;
+					break;
 			}
 
 			menu_item[i] = label[i];
 			menu_subitem[i] = setting[i];
 
@@ -2159,10 +2185,21 @@
 
 				val --;
 				if (val < 1) val = 1;
 				IP_SET_SENSITIVITY(entry[sel/ENTRIES],val);
 			}
+			else if ((sel % ENTRIES) == 3)
+			/* center */
+			{
+				int center = entry[sel/ENTRIES]->type & IPF_CENTER;
+				if (center)
+					center=0;
+				else
+					center=IPF_CENTER;
+				entry[sel/ENTRIES]->type &= ~IPF_CENTER;
+				entry[sel/ENTRIES]->type |= center;
+			}
 		}
 	}
 
 	if (input_ui_pressed_repeat(IPT_UI_RIGHT,8))
 	{
@@ -2195,10 +2232,21 @@
 
 				val ++;
 				if (val > 255) val = 255;
 				IP_SET_SENSITIVITY(entry[sel/ENTRIES],val);
 			}
+			else if ((sel % ENTRIES) == 3)
+			/* center */
+			{
+				int center = entry[sel/ENTRIES]->type & IPF_CENTER;
+				if (center)
+					center=0;
+				else
+					center=IPF_CENTER;
+				entry[sel/ENTRIES]->type &= ~IPF_CENTER;
+				entry[sel/ENTRIES]->type |= center;
+			}
 		}
 	}
 
 	if (input_ui_pressed(IPT_UI_SELECT))
 	{
@@ -2502,14 +2550,16 @@
 
 int showgamewarnings(struct mame_bitmap *bitmap)
 {
 	int i;
 	char buf[2048];
+	unsigned mask = GAME_NOT_WORKING | GAME_UNEMULATED_PROTECTION | GAME_WRONG_COLORS | GAME_NO_SOUND;
+
+	if (!options.skip_gameinfo)
+		mask |= GAME_IMPERFECT_COLORS | GAME_IMPERFECT_SOUND | GAME_IMPERFECT_GRAPHICS | GAME_NO_COCKTAIL;
 
-	if (Machine->gamedrv->flags &
-			(GAME_NOT_WORKING | GAME_UNEMULATED_PROTECTION | GAME_WRONG_COLORS | GAME_IMPERFECT_COLORS |
-			  GAME_NO_SOUND | GAME_IMPERFECT_SOUND | GAME_IMPERFECT_GRAPHICS | GAME_NO_COCKTAIL))
+	if ((Machine->gamedrv->flags & mask) != 0)
 	{
 		int done;
 
 		strcpy(buf, ui_getstring (UI_knownproblems));
 		strcat(buf, "\n\n");
@@ -3069,15 +3119,15 @@
 
 
 #ifndef MESS
 enum { UI_SWITCH = 0,UI_DEFCODE,UI_CODE,UI_ANALOG,UI_CALIBRATE,
 		UI_STATS,UI_GAMEINFO, UI_HISTORY,
-		UI_CHEAT,UI_RESET,UI_MEMCARD,UI_RAPIDFIRE,UI_EXIT };
+		UI_CHEAT,UI_RESET,UI_MEMCARD,UI_RAPIDFIRE,UI_EXIT,UI_OSD };
 #else
 enum { UI_SWITCH = 0,UI_DEFCODE,UI_CODE,UI_ANALOG,UI_CALIBRATE,
 		UI_GAMEINFO, UI_IMAGEINFO,UI_FILEMANAGER,UI_TAPECONTROL,
-		UI_HISTORY,UI_CHEAT,UI_RESET,UI_MEMCARD,UI_RAPIDFIRE,UI_EXIT };
+		UI_HISTORY,UI_CHEAT,UI_RESET,UI_MEMCARD,UI_RAPIDFIRE,UI_EXIT,UI_OSD };
 #endif
 
 
 #ifdef XMAME
 extern int setrapidfire(struct mame_bitmap *bitmap, int selected);
@@ -3190,10 +3240,11 @@
 #endif
 #endif
 #endif
 #endif
 
+	menu_item[menu_total] = ui_getstring (UI_osdmenu); menu_action[menu_total++] = UI_OSD;
 	menu_item[menu_total] = ui_getstring (UI_resetgame); menu_action[menu_total++] = UI_RESET;
 	menu_item[menu_total] = ui_getstring (UI_returntogame); menu_action[menu_total++] = UI_EXIT;
 	menu_item[menu_total] = 0; /* terminate array */
 }
 
@@ -3257,10 +3308,13 @@
 				res = displayhistory(bitmap, sel >> SEL_BITS);
 				break;
 			case UI_CHEAT:
 				res = cheat_menu(bitmap, sel >> SEL_BITS);
 				break;
+			case UI_OSD :
+				res = osd_menu(bitmap, sel >> SEL_BITS);
+				break;
 #ifndef MESS
 #ifndef TINY_COMPILE
 #ifndef CPSMAME
 #ifndef MMSND
 			case UI_MEMCARD:
@@ -3314,10 +3368,11 @@
 			case UI_TAPECONTROL:
 			#endif
 			case UI_HISTORY:
 			case UI_CHEAT:
 			case UI_MEMCARD:
+			case UI_OSD :
 				sel |= 1 << SEL_BITS;
 				schedule_full_refresh();
 				break;
 
 			case UI_RESET:
@@ -4003,22 +4058,23 @@
 {
 #ifdef MESS
 	extern int mess_pause_for_ui;
 #endif
 
-	/* if the user pressed F12, save the screen to a file */
+	if (osd_handle_user_interface(bitmap, setup_selected != 0) != 0)
+		return 1;
+
 	if (input_ui_pressed(IPT_UI_SNAPSHOT))
-		save_screen_snapshot(bitmap);
+		osd_save_snapshot();
+	if (input_ui_pressed(IPT_UI_RECORD_START))
+		osd_record_start();
+	if (input_ui_pressed(IPT_UI_RECORD_STOP))
+		osd_record_stop();
 
 	/* This call is for the cheat, it must be called once a frame */
 	if (options.cheat) DoCheat(bitmap);
 
-	/* if the user pressed ESC, stop the emulation */
-	/* but don't quit if the setup menu is on screen */
-	if (setup_selected == 0 && input_ui_pressed(IPT_UI_CANCEL))
-		return 1;
-
 	if (setup_selected == 0 && input_ui_pressed(IPT_UI_CONFIGURE))
 	{
 		setup_selected = -1;
 		if (osd_selected != 0)
 		{
@@ -4121,12 +4177,15 @@
 				draw_screen();
 			}
 			profiler_mark(PROFILER_END);
 
 			if (input_ui_pressed(IPT_UI_SNAPSHOT))
-				save_screen_snapshot(bitmap);
-
+				osd_save_snapshot();
+			if (input_ui_pressed(IPT_UI_RECORD_START))
+				osd_record_start();
+			if (input_ui_pressed(IPT_UI_RECORD_STOP))
+				osd_record_stop();
 
 			if (input_ui_pressed(IPT_UI_SAVE_STATE))
 				do_loadsave(bitmap, LOADSAVE_SAVE);
 
 			if (input_ui_pressed(IPT_UI_LOAD_STATE))
@@ -4135,11 +4194,11 @@
 			/* if the user pressed F4, show the character set */
 			if (input_ui_pressed(IPT_UI_SHOW_GFX))
 				showcharset(bitmap);
 
 			if (setup_selected == 0 && input_ui_pressed(IPT_UI_CANCEL))
-				return 1;
+				break;
 
 			if (setup_selected == 0 && input_ui_pressed(IPT_UI_CONFIGURE))
 			{
 				setup_selected = -1;
 				if (osd_selected != 0)
diff -U 5 --new-file --recursive src.ori/vidhrdw/cave.c src/vidhrdw/cave.c
--- src.ori/vidhrdw/cave.c	2003-08-09 02:53:14.000000000 +0200
+++ src/vidhrdw/cave.c	2003-09-06 16:25:26.000000000 +0200
@@ -1424,10 +1424,13 @@
 VIDEO_UPDATE( cave )
 {
 	int pri, pri2;
 	int layers_ctrl = -1;
 
+	/* Update the destination pointer. With SMP active it changes from one frame to another. */
+	blit.baseaddr = Machine->scrbitmap->line[0];
+
 	/* Choose the tilemap to display (8x8 tiles or 16x16 tiles) */
 	if (tilemap_0)
 	{	tiledim_0 = cave_vctrl_0[ 1 ] & 0x2000;
 		if (tiledim_0 != old_tiledim_0)	tilemap_mark_all_tiles_dirty(tilemap_0);
 		old_tiledim_0 = tiledim_0;		}
diff -U 5 --new-file --recursive src.ori/vidhrdw/stvvdp1.c src/vidhrdw/stvvdp1.c
--- src.ori/vidhrdw/stvvdp1.c	2003-09-03 22:06:06.000000000 +0200
+++ src/vidhrdw/stvvdp1.c	2003-09-07 22:24:47.000000000 +0200
@@ -333,18 +333,17 @@
 
 void stv_vdp1_process_list(struct mame_bitmap *bitmap, const struct rectangle *cliprect)
 {
 	int position;
 	int spritecount;
+	int vdp1_nest;
 
 	spritecount = 0;
 	position = 0;
 
 	if (vdp1_sprite_log) logerror ("Sprite List Process START\n");
 
-	int vdp1_nest;
-
 	vdp1_nest = -1;
 
 	while (spritecount<10000) // if its drawn this many sprites something is probably wrong or sega were crazy ;-)
 	{
 		int draw_this_sprite;
