diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/advance.pat src/advance.pat
--- src.ori/advance.pat	1970-01-01 01:00:00.000000000 +0100
+++ src/advance.pat	2003-04-09 20:37:49.000000000 +0200
@@ -0,0 +1 @@
+These files are patched for the use with the Advance emulator.
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/common.c src/common.c
--- src.ori/common.c	2003-02-18 15:09:07.000000000 +0100
+++ src/common.c	2003-04-09 20:37:49.000000000 +0200
@@ -411,17 +411,11 @@
 	coin_counter_w - sets input for coin counter
 -------------------------------------------------*/
 
 void coin_counter_w(int num,int on)
 {
-	if (num >= COIN_COUNTERS) return;
-	/* Count it only if the data has changed from 0 to non-zero */
-	if (on && (lastcoin[num] == 0))
-	{
-		coins[num]++;
-	}
-	lastcoin[num] = on;
+	/* moved in update_input_ports */
 }
 
 
 /*-------------------------------------------------
 	coin_lockout_w - locks out one coin input
@@ -1117,11 +1111,11 @@
 		}
 		else
 			strcat(romdata->errorbuf, "WARNING: the game might not run correctly.\n");
 
 		/* display the result */
-		printf("%s", romdata->errorbuf);
+		osd_display_loading_rom_message(romdata->errorbuf, 0);
 
 		/* if we're not getting out of here, wait for a keypress */
 		if (!options.gui_host && !bailing)
 		{
 			int k;
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/cpmame.mak src/cpmame.mak
--- src.ori/cpmame.mak	2001-07-25 00:13:12.000000000 +0200
+++ src/cpmame.mak	2003-04-13 15:43:14.000000000 +0200
@@ -15,10 +15,11 @@
 
 # SOUNDs
 SOUNDS+=YM2151_ALT@
 SOUNDS+=OKIM6295@
 SOUNDS+=QSOUND@
+SOUNDS+=DISCRETE@
 
 DRVLIBS = $(OBJ)/cps.a
 
 $(OBJ)/cps.a: \
 	$(OBJ)/machine/kabuki.o \
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/cpu/i8085/i8085.c src/cpu/i8085/i8085.c
--- src.ori/cpu/i8085/i8085.c	2002-08-25 01:51:27.000000000 +0200
+++ src/cpu/i8085/i8085.c	2003-04-09 20:37:49.000000000 +0200
@@ -61,10 +61,16 @@
  *
  *****************************************************************************/
 
 /*int survival_prot = 0; */
 
+#if defined(__GNUC__) && __GNUC__ >= 3
+/* Disable all the asm macro and the big switch */
+#undef X86_ASM
+#define BIG_SWITCH 0
+#endif
+
 #define VERBOSE 0
 
 #include "driver.h"
 #include "state.h"
 #include "osd_cpu.h"
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/cpu/m68000/make68k.c src/cpu/m68000/make68k.c
--- src.ori/cpu/m68000/make68k.c	2002-11-15 20:08:25.000000000 +0100
+++ src/cpu/m68000/make68k.c	2003-04-09 20:37:49.000000000 +0200
@@ -188,11 +188,11 @@
 
 
 #define NORMAL 0
 #define PCREL  1
 
-#ifdef __ELF__
+#if defined(USE_OBJ_ELF)
 #define PREF ""
 #else
 #define PREF "_"
 #endif
 
@@ -249,17 +249,17 @@
 
 
 
 /* External register preservation */
 
-#ifdef DOS
+#if defined(USE_COMPILER_GNUC)
 
 /* Registers normally saved around C routines anyway */
 /* GCC 2.9.1 (dos) seems to preserve EBX,EDI and EBP */
 static char SavedRegs[] = "-B--SDB";
 
-#elif defined(WIN32)
+#elif defined(USE_COMPILER_VISUALC)
 
 /* visual C++, win32, says it preserves ebx, edi, esi, and ebp */
 /* ---------- VC++ deosn't preserve EDI? (Kenjo, 110399) ---------- */
 static char SavedRegs[] = "-B--S-B";
 
@@ -8037,11 +8037,11 @@
 	fprintf(fp, "\t\tDW   0,0,0\n\n");
 
 
 /* If Win32, put the table area in .data section (Kenjo) */
 
-#ifdef WIN32
+#if defined(USE_OS_WINDOWS)
 
 	fprintf(fp, "%s_OPCODETABLE\tTIMES  65536  DD 0\n\n", CPUtype);
 
 #else
 
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/cpu/tms9900/9900stat.h src/cpu/tms9900/9900stat.h
--- src.ori/cpu/tms9900/9900stat.h	2000-01-11 17:50:10.000000000 +0100
+++ src/cpu/tms9900/9900stat.h	2003-05-08 21:03:29.000000000 +0200
@@ -186,11 +186,11 @@
 }
 
 #define wadd(addr,expr) { int lval = setst_add_laeco(readword(addr), (expr)); writeword((addr),lval); }
 #define wsub(addr,expr) { int lval = setst_sub_laeco(readword(addr), (expr)); writeword((addr),lval); }
 
-#ifdef __POWERPC__
+#if defined(__POWERPC__) && !defined(__GNUC__)
 
 // setst_add_32_laeco :
 // - computes a+b
 // - sets L, A, E, Carry and Overflow in st
 //
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/cpu/tms9900/99xxstat.h src/cpu/tms9900/99xxstat.h
--- src.ori/cpu/tms9900/99xxstat.h	1999-12-30 15:57:16.000000000 +0100
+++ src/cpu/tms9900/99xxstat.h	2003-05-08 21:03:29.000000000 +0200
@@ -190,11 +190,11 @@
 }
 
 #define wadd(addr,expr) { int lval = setst_add_laeco(readword(addr), (expr)); writeword((addr),lval); }
 #define wsub(addr,expr) { int lval = setst_sub_laeco(readword(addr), (expr)); writeword((addr),lval); }
 
-#ifdef __POWERPC__
+#if defined(__POWERPC__) && !defined(__GNUC__)
 
 // setst_add_32_laeco :
 // - computes a+b
 // - sets L, A, E, Carry and Overflow in st
 //
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/cpu/z80/z80.c src/cpu/z80/z80.c
--- src.ori/cpu/z80/z80.c	2003-02-27 23:02:43.000000000 +0100
+++ src/cpu/z80/z80.c	2003-04-09 20:37:49.000000000 +0200
@@ -80,10 +80,16 @@
 
 #ifdef Z80_MSX
 #include "z80_msx.h"
 #endif
 
+#if defined(__GNUC__) && __GNUC__ >= 3
+/* Disable all the asm macro and the big switch */
+#undef X86_ASM
+#define BIG_SWITCH 0
+#endif
+
 #define VERBOSE 0
 
 #if VERBOSE
 #define LOG(x)	logerror x
 #else
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/cpuexec.c src/cpuexec.c
--- src.ori/cpuexec.c	2003-03-18 20:15:36.000000000 +0100
+++ src/cpuexec.c	2003-04-09 20:37:49.000000000 +0200
@@ -233,10 +233,13 @@
 	watchdog_counter = -1;
 
 	/* reset sound chips */
 	sound_reset();
 
+	/* reset the osd level */
+	osd_reset();
+
 	/* first pass over CPUs */
 	for (cpunum = 0; cpunum < cpu_gettotalcpu(); cpunum++)
 	{
 		/* enable all CPUs (except for audio CPUs if the sound is off) */
 		if (!(Machine->drv->cpu[cpunum].cpu_flags & CPU_AUDIO_CPU) || Machine->sample_rate != 0)
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/drivers/dynax.c src/drivers/dynax.c
--- src.ori/drivers/dynax.c	2003-04-06 16:26:58.000000000 +0200
+++ src/drivers/dynax.c	2003-04-11 20:02:13.000000000 +0200
@@ -1770,10 +1770,12 @@
 	ROM_LOAD( "prom1.6b",  0x200, 0x200, 0xe38eb360 )
 ROM_END
 
 static DRIVER_INIT( maya )
 {
+	int i;
+	data8_t	*gfx;
 	/* Address lines scrambling on 1 z80 rom */
 	data8_t	*rom = memory_region(REGION_CPU1) + 0x28000,
 			*end = rom + 0x10000;
 	for (;rom < end; rom+=8)
 	{
@@ -1784,13 +1786,13 @@
 		rom[0] = temp[0];	rom[1] = temp[4];	rom[2] = temp[1];	rom[3] = temp[5];
 		rom[4] = temp[2];	rom[5] = temp[6];	rom[6] = temp[3];	rom[7] = temp[7];
 	}
 
 	/* Address lines scrambling on the blitter data roms */
-	data8_t	*gfx = memory_region(REGION_GFX1);
+	gfx = memory_region(REGION_GFX1);
 	rom = memory_region(REGION_USER1);
-	int i;
+
 	for (i = 0; i < 0xc0000; i++)
 		gfx[i] = rom[BITSWAP24(i,23,22,21,20,19,18,14,15, 16,17,13,12,11,10,9,8, 7,6,5,4,3,2,1,0)];
 }
 
 
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/drivers/namcos1.c src/drivers/namcos1.c
--- src.ori/drivers/namcos1.c	2002-12-25 17:37:56.000000000 +0100
+++ src/drivers/namcos1.c	2003-04-13 15:54:30.000000000 +0200
@@ -925,11 +925,11 @@
 	MDRV_INTERLEAVE(240) // necessary to ensure the 1st and 2nd CPU's work in tandem
 	MDRV_MACHINE_INIT(namcos1)
 	MDRV_NVRAM_HANDLER(generic_0fill)
 
 	/* video hardware */
-	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN | VIDEO_UPDATE_BEFORE_VBLANK)
+	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN | VIDEO_UPDATE_BEFORE_VBLANK | VIDEO_HAS_SHADOWS)
 	MDRV_SCREEN_SIZE(36*8, 28*8)
 	MDRV_VISIBLE_AREA(0*8, 36*8-1, 0*8, 28*8-1)
 	MDRV_GFXDECODE(gfxdecodeinfo)
 	MDRV_PALETTE_LENGTH(128*16+6*256+6*256+1)
 
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/drivers/namcos2.c src/drivers/namcos2.c
--- src.ori/drivers/namcos2.c	2003-03-10 15:13:04.000000000 +0100
+++ src/drivers/namcos2.c	2003-04-13 15:54:38.000000000 +0200
@@ -1602,11 +1602,11 @@
 	MDRV_INTERLEAVE(100) /* CPU slices per frame */
 
 	MDRV_MACHINE_INIT(namcos2)
 	MDRV_NVRAM_HANDLER(namcos2)
 
-	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN)
+	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN | VIDEO_HAS_SHADOWS)
 	MDRV_SCREEN_SIZE(36*8, 28*8)
 	MDRV_VISIBLE_AREA(0*8, 36*8-1, 0*8, 28*8-1)
 	MDRV_GFXDECODE(gfxdecodeinfo)
 	MDRV_PALETTE_LENGTH(VIRTUAL_PALETTE_BANKS*256)	/* virtual palette (physical palette has 8192 colors) */
 
@@ -1641,11 +1641,11 @@
 	MDRV_INTERLEAVE(100) /* CPU slices per frame */
 
 	MDRV_MACHINE_INIT(namcos2)
 	MDRV_NVRAM_HANDLER(namcos2)
 
-	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN)
+	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN | VIDEO_HAS_SHADOWS)
 	MDRV_SCREEN_SIZE(36*8, 28*8)
 	MDRV_VISIBLE_AREA(0*8, 36*8-1, 0*8, 28*8-1)
 	MDRV_GFXDECODE(gfxdecodeinfo)
 	MDRV_PALETTE_LENGTH(VIRTUAL_PALETTE_BANKS*256)	/* virtual palette (physical palette has 8192 colors) */
 
@@ -1680,11 +1680,11 @@
 	MDRV_INTERLEAVE(100) /* CPU slices per frame */
 
 	MDRV_MACHINE_INIT(namcos2)
 	MDRV_NVRAM_HANDLER(namcos2)
 
-	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN)
+	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN | VIDEO_HAS_SHADOWS)
 	MDRV_SCREEN_SIZE(36*8, 28*8)
 	MDRV_VISIBLE_AREA(0*8, 36*8-1, 0*8, 28*8-1)
 
 	MDRV_GFXDECODE(finallap_gfxdecodeinfo)
 	MDRV_PALETTE_LENGTH(VIRTUAL_PALETTE_BANKS*256)	/* virtual palette (physical palette has 8192 colors) */
@@ -1720,11 +1720,11 @@
 	MDRV_INTERLEAVE(100) /* CPU slices per frame */
 
 	MDRV_MACHINE_INIT(namcos2)
 	MDRV_NVRAM_HANDLER(namcos2)
 
-	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN)
+	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN | VIDEO_HAS_SHADOWS)
 	MDRV_SCREEN_SIZE(36*8, 28*8)
 	MDRV_VISIBLE_AREA(0*8, 36*8-1, 0*8, 28*8-1)
 	MDRV_GFXDECODE(sgunner_gfxdecodeinfo)
 	MDRV_PALETTE_LENGTH(VIRTUAL_PALETTE_BANKS*256)	/* virtual palette (physical palette has 8192 colors) */
 
@@ -1759,11 +1759,11 @@
 	MDRV_INTERLEAVE(100) /* CPU slices per frame */
 
 	MDRV_MACHINE_INIT(namcos2)
 	MDRV_NVRAM_HANDLER(namcos2)
 
-	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN)
+	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN | VIDEO_HAS_SHADOWS)
 	MDRV_SCREEN_SIZE(36*8, 28*8)
 	MDRV_VISIBLE_AREA(0*8, 36*8-1, 0*8, 28*8-1)
 	MDRV_GFXDECODE(luckywld_gfxdecodeinfo)
 	MDRV_PALETTE_LENGTH(VIRTUAL_PALETTE_BANKS*256)	/* virtual palette (physical palette has 8192 colors) */
 
@@ -1798,11 +1798,11 @@
 	MDRV_INTERLEAVE(100) /* CPU slices per frame */
 
 	MDRV_MACHINE_INIT(namcos2)
 	MDRV_NVRAM_HANDLER(namcos2)
 
-	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN)
+	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_NEEDS_6BITS_PER_GUN | VIDEO_HAS_SHADOWS)
 
 	MDRV_SCREEN_SIZE(36*8, 28*8)
 	MDRV_VISIBLE_AREA(0*8, 36*8-1, 0*8, 28*8-1)
 
     MDRV_GFXDECODE(metlhawk_gfxdecodeinfo)
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/drivers/neogeo.c src/drivers/neogeo.c
--- src.ori/drivers/neogeo.c	2003-03-10 15:13:42.000000000 +0100
+++ src/drivers/neogeo.c	2003-04-09 20:37:49.000000000 +0200
@@ -294,11 +294,11 @@
 			}
 			fc++;
 		}
 
 		if (irq2control & IRQ2CTRL_ENABLE)
-			usrintf_showmessage("IRQ2 enabled, need raster driver");
+			/* usrintf_showmessage("IRQ2 enabled, need raster driver") */ ;
 
 		/* return a standard vblank interrupt */
 		vblank_int = 1;	   /* vertical blank */
 	}
 
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/drivers/shangha3.c src/drivers/shangha3.c
--- src.ori/drivers/shangha3.c	2002-08-24 15:49:49.000000000 +0200
+++ src/drivers/shangha3.c	2003-04-13 15:59:23.000000000 +0200
@@ -521,11 +521,11 @@
 
 	MDRV_FRAMES_PER_SECOND(60)
 	MDRV_VBLANK_DURATION(DEFAULT_REAL_60HZ_VBLANK_DURATION)
 
 	/* video hardware */
-	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER)
+	MDRV_VIDEO_ATTRIBUTES(VIDEO_TYPE_RASTER | VIDEO_HAS_SHADOWS)
 	MDRV_SCREEN_SIZE(24*16, 16*16)
 	MDRV_VISIBLE_AREA(0*16, 24*16-1, 1*16, 15*16-1)
 	MDRV_GFXDECODE(gfxdecodeinfo)
 	MDRV_PALETTE_LENGTH(2048)
 
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/fileio.c src/fileio.c
--- src.ori/fileio.c	2003-02-10 22:19:18.000000000 +0100
+++ src/fileio.c	2003-04-09 20:37:49.000000000 +0200
@@ -57,10 +57,11 @@
 	UINT64 offset;
 	UINT64 length;
 	UINT8 eof;
 	UINT8 type;
 	UINT32 crc;
+	int back_char; /* Buffered char for unget. EOF for empty. */
 };
 
 
 
 /***************************************************************************
@@ -289,10 +290,13 @@
 	mame_fread
 ***************************************************************************/
 
 UINT32 mame_fread(mame_file *file, void *buffer, UINT32 length)
 {
+	/* flush any buffered char */
+	file->back_char = EOF;
+
 	/* switch off the file type */
 	switch (file->type)
 	{
 		case PLAIN_FILE:
 			return osd_fread(file->file, buffer, length);
@@ -322,10 +326,13 @@
 	mame_fwrite
 ***************************************************************************/
 
 UINT32 mame_fwrite(mame_file *file, const void *buffer, UINT32 length)
 {
+	/* flush any buffered char */
+	file->back_char = EOF;
+
 	/* switch off the file type */
 	switch (file->type)
 	{
 		case PLAIN_FILE:
 			return osd_fwrite(file->file, buffer, length);
@@ -342,10 +349,13 @@
 
 int mame_fseek(mame_file *file, INT64 offset, int whence)
 {
 	int err = 0;
 
+	/* flush any buffered char */
+	file->back_char = EOF;
+
 	/* switch off the file type */
 	switch (file->type)
 	{
 		case PLAIN_FILE:
 			return osd_fseek(file->file, offset, whence);
@@ -443,10 +453,16 @@
 
 int mame_fgetc(mame_file *file)
 {
 	char buffer;
 
+	if (file->back_char != EOF) {
+		buffer = file->back_char;
+		file->back_char = EOF;
+		return buffer;
+	}
+
 	/* switch off the file type */
 	switch (file->type)
 	{
 		case PLAIN_FILE:
 			if (osd_fread(file->file, &buffer, 1) == 1)
@@ -470,38 +486,13 @@
 	mame_ungetc
 ***************************************************************************/
 
 int mame_ungetc(int c, mame_file *file)
 {
-	/* switch off the file type */
-	switch (file->type)
-	{
-		case PLAIN_FILE:
-			if (osd_feof(file->file))
-			{
-				if (osd_fseek(file->file, 0, SEEK_CUR))
-					return c;
-			}
-			else
-			{
-				if (osd_fseek(file->file, -1, SEEK_CUR))
-					return c;
-			}
-			return EOF;
-
-		case RAM_FILE:
-		case ZIPPED_FILE:
-			if (file->eof)
-				file->eof = 0;
-			else if (file->offset > 0)
-			{
-				file->offset--;
-				return c;
-			}
-			return EOF;
-	}
-	return EOF;
+	file->back_char = c;
+  
+	return c;
 }
 
 
 
 /***************************************************************************
@@ -559,10 +550,14 @@
 	mame_feof
 ***************************************************************************/
 
 int mame_feof(mame_file *file)
 {
+	/* check for buffered chars */
+	if (file->back_char != EOF)
+		return 0;
+
 	/* switch off the file type */
 	switch (file->type)
 	{
 		case PLAIN_FILE:
 			return osd_feof(file->file);
@@ -789,10 +784,12 @@
 	LOG(("generic_fopen(%d, %s, %s, %s, %X)\n", pathc, gamename, filename, extension, flags));
 
 	/* reset the file handle */
 	memset(&file, 0, sizeof(file));
 
+	file.back_char = EOF;
+
 	/* check for incompatible flags */
 	if ((flags & FILEFLAG_OPENWRITE) && (flags & FILEFLAG_CRC))
 		fprintf(stderr, "Can't use CRC option with WRITE option in generic_fopen!\n");
 
 	/* determine start/stop based on reverse search flag */
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/info.c src/info.c
--- src.ori/info.c	2003-02-28 11:29:31.000000000 +0100
+++ src/info.c	2003-04-09 20:55:37.000000000 +0200
@@ -929,10 +929,11 @@
 	PRINT_RESOURCE(decocass);
 	PRINT_RESOURCE(playch10);
 	PRINT_RESOURCE(pgm);
 	PRINT_RESOURCE(skns);
 	PRINT_RESOURCE(stvbios);
+	PRINT_RESOURCE(konamigx);
 #endif
 #endif
 
 	if (OUTPUT_XML)
 	{
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/inptport.c src/inptport.c
--- src.ori/inptport.c	2002-11-20 22:21:00.000000000 +0100
+++ src/inptport.c	2003-04-09 20:37:49.000000000 +0200
@@ -147,10 +147,13 @@
 	{ IPT_UI_SHOW_PROFILER,     "Show Profiler",		SEQ_DEF_2(KEYCODE_F11, KEYCODE_LSHIFT) },
 #ifdef MESS
 	{ IPT_UI_TOGGLE_UI,         "UI Toggle",			SEQ_DEF_1(KEYCODE_SCRLOCK) },
 #endif
 	{ IPT_UI_SNAPSHOT,          "Save Snapshot",		SEQ_DEF_1(KEYCODE_F12) },
+	{ IPT_UI_RECORD_START,      "Record Start", SEQ_DEF_2(KEYCODE_ENTER,KEYCODE_LCONTROL) },
+	{ IPT_UI_RECORD_STOP,       "Record Stop", SEQ_DEF_3(KEYCODE_ENTER,CODE_NOT,KEYCODE_LCONTROL) },
+	{ IPT_UI_TURBO,             "Turbo", SEQ_DEF_1(KEYCODE_ASTERISK) },
 	{ IPT_UI_TOGGLE_CHEAT,      "Toggle Cheat",			SEQ_DEF_1(KEYCODE_F6) },
 	{ IPT_UI_UP,                "UI Up",				SEQ_DEF_3(KEYCODE_UP, CODE_OR, JOYCODE_1_UP) },
 	{ IPT_UI_DOWN,              "UI Down",				SEQ_DEF_3(KEYCODE_DOWN, CODE_OR, JOYCODE_1_DOWN) },
 	{ IPT_UI_LEFT,              "UI Left",				SEQ_DEF_3(KEYCODE_LEFT, CODE_OR, JOYCODE_1_LEFT) },
 	{ IPT_UI_RIGHT,             "UI Right",				SEQ_DEF_3(KEYCODE_RIGHT, CODE_OR, JOYCODE_1_RIGHT) },
@@ -158,10 +161,12 @@
 	{ IPT_UI_CANCEL,            "UI Cancel",			SEQ_DEF_1(KEYCODE_ESC) },
 	{ IPT_UI_PAN_UP,            "Pan Up",				SEQ_DEF_3(KEYCODE_PGUP, CODE_NOT, KEYCODE_LSHIFT) },
 	{ IPT_UI_PAN_DOWN,          "Pan Down",				SEQ_DEF_3(KEYCODE_PGDN, CODE_NOT, KEYCODE_LSHIFT) },
 	{ IPT_UI_PAN_LEFT,          "Pan Left",				SEQ_DEF_2(KEYCODE_PGUP, KEYCODE_LSHIFT) },
 	{ IPT_UI_PAN_RIGHT,         "Pan Right",			SEQ_DEF_2(KEYCODE_PGDN, KEYCODE_LSHIFT) },
+	{ IPT_UI_MODE_NEXT,         "Mode Next",         SEQ_DEF_1(KEYCODE_STOP) },
+	{ IPT_UI_MODE_PRED,         "Mode Pred",         SEQ_DEF_1(KEYCODE_COMMA) },
 	{ IPT_UI_TOGGLE_DEBUG,      "Toggle Debugger",		SEQ_DEF_1(KEYCODE_F5) },
 	{ IPT_UI_SAVE_STATE,        "Save State",			SEQ_DEF_2(KEYCODE_F7, KEYCODE_LSHIFT) },
 	{ IPT_UI_LOAD_STATE,        "Load State",			SEQ_DEF_3(KEYCODE_F7, CODE_NOT, KEYCODE_LSHIFT) },
 	{ IPT_UI_ADD_CHEAT,			"Add Cheat",			SEQ_DEF_1(KEYCODE_A) },
 	{ IPT_UI_DELETE_CHEAT,		"Delete Cheat",			SEQ_DEF_1(KEYCODE_D) },
@@ -1151,10 +1156,11 @@
 		if (readint(f,&dispensed_tickets) != 0)
 			goto getout;
 
 		mixer_read_config(f);
 
+		osd_customize_inputport_current(Machine->input_ports);
 getout:
 		mame_fclose(f);
 	}
 
 	/* All analog ports need initialization */
@@ -1694,14 +1700,16 @@
 		int new, prev;
 
 		/* center stick */
 		if ((delta == 0) && (in->type & IPF_CENTER))
 		{
-			if (current > default_value)
-			delta = -100 / sensitivity;
-			if (current < default_value)
-			delta = 100 / sensitivity;
+			/* return backward at middle speed */
+			delta = default_value - current;
+			if (delta < -(keydelta+1)/2)
+				delta = -(keydelta+1)/2;
+			if (delta > (keydelta+1)/2)
+				delta = (keydelta+1)/2;
 		}
 
 		/* An analog joystick which is not at zero position (or has just */
 		/* moved there) takes precedence over all other computations */
 		/* analog_x/y holds values from -128 to 128 (yes, 128, not 127) */
@@ -1959,16 +1967,23 @@
 #define MAX_INPUT_BITS 1024
 	static int impulsecount[MAX_INPUT_BITS];
 	static int waspressed[MAX_INPUT_BITS];
 	static int pbwaspressed[MAX_INPUT_BITS];
 
+	unsigned newcoin[COIN_COUNTERS];
+	unsigned coin;
+
 #ifdef MAME_NET
 	int player;
 #endif /* MAME_NET */
 
 
 profiler_mark(PROFILER_INPUT);
+	
+	/* clear the new coin status */
+	for(coin=0;coin<4;++coin)
+		newcoin[coin] = 0;
 
 	/* clear all the values before proceeding */
 	for (port = 0;port < MAX_INPUT_PORTS;port++)
 	{
 		input_port_value[port] = 0;
@@ -2057,18 +2072,20 @@
 				}
 				else
 				{
 					InputSeq* seq;
 					seq = input_port_seq(in);
-					if (seq_pressed(seq))
+
+					if (osd_input_port_filter(seq_pressed(seq), in->type & (IPF_PLAYERMASK | ~IPF_MASK)))
 					{
-						/* skip if coin input and it's locked out */
-						if ((in->type & ~IPF_MASK) >= IPT_COIN1 &&
-							(in->type & ~IPF_MASK) <= IPT_COIN4 &&
-                            coinlockedout[(in->type & ~IPF_MASK) - IPT_COIN1])
-						{
-							continue;
+						if ((in->type & ~IPF_MASK) >= IPT_COIN1 && (in->type & ~IPF_MASK) <= IPT_COIN4) {
+							unsigned ncoin = (in->type & ~IPF_MASK) - IPT_COIN1;
+							if (coinlockedout[ncoin])
+								continue;
+							if (!lastcoin[ncoin])
+								++coins[ncoin];
+							newcoin[ncoin] = 1;
 						}
 
 						/* if IPF_RESET set, reset the first CPU */
 						if ((in->type & IPF_RESETCPU) && waspressed[ib] == 0 && !playback)
 						{
@@ -2196,10 +2213,14 @@
 #ifdef MAME_NET
 	if ( net_active() && (default_player != NET_SPECTATOR) )
 		net_input_sync((unsigned char *) input_port_value, (unsigned char *) input_port_defaults, MAX_INPUT_PORTS);
 #endif /* MAME_NET */
 
+	/* set the last coin status */
+	for(coin=0;coin<4;++coin)
+		lastcoin[coin] = newcoin[coin];
+	
 profiler_mark(PROFILER_END);
 }
 
 
 
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/inptport.h src/inptport.h
--- src.ori/inptport.h	2002-11-15 19:36:21.000000000 +0100
+++ src/inptport.h	2003-04-09 20:37:49.000000000 +0200
@@ -81,10 +81,15 @@
 	IPT_OSD_4,
 	IPT_EXTENSION,	/* this is an extension on the previous InputPort, not a real inputport. */
 					/* It is used to store additional parameters for analog inputs */
 
 	/* the following are special codes for user interface handling - not to be used by drivers! */
+	IPT_UI_MODE_NEXT,
+	IPT_UI_MODE_PRED,
+	IPT_UI_RECORD_START,
+	IPT_UI_RECORD_STOP,
+	IPT_UI_TURBO,
 	IPT_UI_CONFIGURE,
 	IPT_UI_ON_SCREEN_DISPLAY,
 	IPT_UI_PAUSE,
 	IPT_UI_RESET_MACHINE,
 	IPT_UI_SHOW_GFX,
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/input.c src/input.c
--- src.ori/input.c	2002-06-30 21:57:54.000000000 +0200
+++ src/input.c	2003-04-09 20:37:49.000000000 +0200
@@ -782,11 +782,11 @@
 {
 	int pressed;
 
 	profiler_mark(PROFILER_INPUT);
 
-	pressed = seq_pressed(input_port_type_seq(code));
+	pressed = osd_input_ui_filter(seq_pressed(input_port_type_seq(code)),code);
 
 	if (pressed)
 	{
 		if (ui_map[code].memory == 0)
 		{
@@ -806,11 +806,11 @@
 	static int counter,inputdelay;
 	int pressed;
 
 	profiler_mark(PROFILER_INPUT);
 
-	pressed = seq_pressed(input_port_type_seq(code));
+	pressed = osd_input_ui_filter(seq_pressed(input_port_type_seq(code)),code);
 
 	if (pressed)
 	{
 		if (ui_map[code].memory == 0)
 		{
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/mame.c src/mame.c
--- src.ori/mame.c	2003-03-01 14:59:38.000000000 +0100
+++ src/mame.c	2003-04-09 20:37:49.000000000 +0200
@@ -957,26 +957,20 @@
 	to a given resolution
 -------------------------------------------------*/
 
 static void scale_vectorgames(int gfx_width, int gfx_height, int *width, int *height)
 {
-	double x_scale, y_scale, scale;
-
-	/* compute the scale values */
-	x_scale = (double)gfx_width / (double)(*width);
-	y_scale = (double)gfx_height / (double)(*height);
-
-	/* pick the smaller scale factor */
-	scale = (x_scale < y_scale) ? x_scale : y_scale;
-
-	/* compute the new size */
-	*width = (int)((double)*width * scale);
-	*height = (int)((double)*height * scale);
-
-	/* round to the nearest 4 pixel value */
-	*width &= ~3;
-	*height &= ~3;
+	if (Machine->orientation & ORIENTATION_SWAP_XY)
+	{
+		*width = gfx_height;
+		*height = gfx_width*9/16;
+	}
+	else
+	{
+		*width = gfx_width;
+		*height = gfx_height;
+	}
 }
 
 
 
 /*-------------------------------------------------
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/neomame.mak src/neomame.mak
--- src.ori/neomame.mak	2001-02-16 17:13:54.000000000 +0100
+++ src/neomame.mak	2003-04-13 15:39:55.000000000 +0200
@@ -8,17 +8,20 @@
 EMULATOR_EXE = neomame.exe
 
 # CPUs
 CPUS+=Z80@
 CPUS+=M68000@
+CPUS+=M68020@
 
 # SOUNDs
 SOUNDS+=AY8910@
 SOUNDS+=YM2610@
+SOUNDS+=DISCRETE@
 
 DRVLIBS = $(OBJ)/neogeo.a
 
 $(OBJ)/neogeo.a: \
 	$(OBJ)/machine/neogeo.o $(OBJ)/machine/pd4990a.o $(OBJ)/vidhrdw/neogeo.o $(OBJ)/drivers/neogeo.o \
+	$(OBJ)/machine/neocrypt.o
 
 # MAME specific core objs
 COREOBJS += $(OBJ)/driver.o $(OBJ)/cheat.o
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/osdepend.h src/osdepend.h
--- src.ori/osdepend.h	2002-12-21 19:07:36.000000000 +0100
+++ src/osdepend.h	2003-04-09 20:37:49.000000000 +0200
@@ -358,11 +358,37 @@
 /* things like changing the title bar or darkening the display. */
 /* Note that the OS dependant code must NOT stop processing input, since the user */
 /* interface is still active while the game is paused. */
 void osd_pause(int paused);
 
+/******************************************************************************
 
+  Additions
+
+******************************************************************************/
+
+/* called then the game is reset */
+void osd_reset(void);
+
+/* execute the specified menu (0,1,...) */
+int osd_menu(struct mame_bitmap *bitmap, int sel);
+
+/* filter the user interface input state */
+int osd_input_ui_filter(int result, int type);
+
+/* filter the main exit request */
+int osd_input_exit_filter(int result);
+
+/* filter the input port state */
+int osd_input_port_filter(int result, int type);
+
+/* start and stop the video/sound recording. */
+void osd_record_start(void);
+void osd_record_stop(void);
+
+/* customize the inputport after they are read from the .cfg file */
+void osd_customize_inputport_current(struct InputPort* current);
 
 #ifdef MAME_NET
 /* network */
 int osd_net_init(void);
 int osd_net_send(int player, unsigned char buf[], int *size);
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/sound/fm.c src/sound/fm.c
--- src.ori/sound/fm.c	2002-12-21 23:38:58.000000000 +0100
+++ src/sound/fm.c	2003-04-09 20:37:49.000000000 +0200
@@ -365,11 +365,11 @@
 #define PMS_RATE 0x400
 /* LFO runtime work */
 static UINT32 lfo_amd;
 static INT32 lfo_pmd;
 
-#if BUILD_YM2610B
+#if BUILD_YM2610B || BUILD_OPNB
 static UINT32 LFOCnt,LFOIncr;	/* LFO Phase Generator */
 #endif
 
 /* OPN LFO waveform table */
 static INT32 OPN_LFO_wave[LFO_ENT];
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/sound/multipcm.c src/sound/multipcm.c
--- src.ori/sound/multipcm.c	2003-04-06 11:50:23.000000000 +0200
+++ src/sound/multipcm.c	2003-04-11 19:36:24.000000000 +0200
@@ -209,16 +209,16 @@
 	char buf[2][40];
 	const char *name[2];
 	int vol[2];
 	struct MultiPCM_interface *intf;
 
-	intf = msound->sound_interface;
-
 	// make volume table
 	double	max=255.0;
 	double	db=(48.0/128);
 
+	intf = msound->sound_interface;
+
 	for (i = 0; i < 128; i++)
 	{
 		voltbl[i]=max;
 		max /= pow(10.0,db/20.0);
 	}
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/ui_text.c src/ui_text.c
--- src.ori/ui_text.c	2003-03-31 06:43:57.000000000 +0200
+++ src/ui_text.c	2003-04-09 20:37:49.000000000 +0200
@@ -202,10 +202,14 @@
 	"Restoration successful",
 	"Select a value",
 	"All values saved",
 	"One match found - added to list",
 
+	/* addendum */
+	"Center",
+	"Video",
+
 	NULL
 };
 
 int uistring_init (mame_file *langfile)
 {
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/ui_text.h src/ui_text.h
--- src.ori/ui_text.h	2002-11-21 07:42:00.000000000 +0100
+++ src/ui_text.h	2003-04-09 20:37:49.000000000 +0200
@@ -169,10 +169,14 @@
 	UI_search_OK,
 	UI_search_select_value,
 	UI_search_all_values_saved,
 	UI_search_one_match_found_added,
 
+	/* addendum */
+	UI_center,
+	UI_osdmenu,
+
 	UI_last_entry
 };
 
 struct lang_struct
 {
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/usrintrf.c src/usrintrf.c
--- src.ori/usrintrf.c	2003-03-18 10:17:07.000000000 +0100
+++ src/usrintrf.c	2003-04-09 20:37:49.000000000 +0200
@@ -844,12 +844,16 @@
 	while (items[i])
 	{
 		len = 3 + strlen(items[i]);
 		if (subitems && subitems[i])
 			len += 2 + strlen(subitems[i]);
-		if (len > maxlen && len <= highlen)
-			maxlen = len;
+		if (len > maxlen) {
+			if (len <= highlen)
+				maxlen = len;
+			else
+				maxlen = highlen;
+		}
 		i++;
 	}
 	count = i;
 
 	visible = uirotheight / (3 * uirotcharheight / 2) - 1;
@@ -917,15 +921,27 @@
 				dt[curr_dt].y = topoffs + (3*i+1)*uirotcharheight/2;
 				curr_dt++;
 			}
 			else
 			{
-				dt[curr_dt].text = items[item];
-				dt[curr_dt].color = UI_COLOR_NORMAL;
-				dt[curr_dt].x = (uirotwidth - uirotcharwidth * strlen(items[item])) / 2;
-				dt[curr_dt].y = topoffs + (3*i+1)*uirotcharheight/2;
-				curr_dt++;
+				unsigned y = topoffs + (3*i+1)*uirotcharheight/2;
+				int color = (flag && flag[item]) ? UI_COLOR_INVERSE : UI_COLOR_NORMAL;
+				len = strlen(items[item]);
+				if (len > maxlen - 3) {
+					unsigned x;
+					const char* dot = "...";
+					len = maxlen - 3;
+					x = (uirotwidth - uirotcharwidth * len) / 2;
+					ui_text_ex(bitmap,items[item],items[item] + len - 3,x,y,color);
+					ui_text_ex(bitmap,dot,dot+3,x + uirotcharwidth * (len - 3),y,color);
+				} else {
+					dt[curr_dt].text = items[item];
+					dt[curr_dt].color = color;
+					dt[curr_dt].x = (uirotwidth - uirotcharwidth * len) / 2;
+					dt[curr_dt].y = y;
+					curr_dt++;
+				}
 			}
 		}
 	}
 
 	i = selected - topitem;
@@ -2044,13 +2060,13 @@
 		in++;
 	}
 
 	if (total == 0) return 0;
 
-	/* Each analog control has 3 entries - key & joy delta, reverse, sensitivity */
+	/* Each analog control has 4 entries - key & joy delta, reverse, sensitivity */
 
-#define ENTRIES 3
+#define ENTRIES 4
 
 	total2 = total * ENTRIES;
 
 	menu_item[total2] = ui_getstring (UI_returntomain);
 	menu_item[total2 + 1] = 0;	/* terminate array */
@@ -2063,15 +2079,17 @@
 		{
 			char label[30][40];
 			char setting[30][40];
 			int sensitivity,delta;
 			int reverse;
+			int center;
 
 			strcpy (label[i], input_port_name(entry[i/ENTRIES]));
 			sensitivity = IP_GET_SENSITIVITY(entry[i/ENTRIES]);
 			delta = IP_GET_DELTA(entry[i/ENTRIES]);
 			reverse = (entry[i/ENTRIES]->type & IPF_REVERSE);
+			center = (entry[i/ENTRIES]->type & IPF_CENTER);
 
 			strcat (label[i], " ");
 			switch (i%ENTRIES)
 			{
 				case 0:
@@ -2090,10 +2108,18 @@
 				case 2:
 					strcat (label[i], ui_getstring (UI_sensitivity));
 					sprintf(setting[i],"%3d%%",sensitivity);
 					if (i == sel) arrowize = 3;
 					break;
+				case 3:
+					strcat (label[i], ui_getstring (UI_center));
+					if (center)
+						strcpy(setting[i],ui_getstring (UI_on));
+					else
+						strcpy(setting[i],ui_getstring (UI_off));
+					if (i == sel) arrowize = 3;
+					break;
 			}
 
 			menu_item[i] = label[i];
 			menu_subitem[i] = setting[i];
 
@@ -2141,10 +2167,21 @@
 
 				val --;
 				if (val < 1) val = 1;
 				IP_SET_SENSITIVITY(entry[sel/ENTRIES],val);
 			}
+			else if ((sel % ENTRIES) == 3)
+			/* center */
+			{
+				int center = entry[sel/ENTRIES]->type & IPF_CENTER;
+				if (center)
+					center=0;
+				else
+					center=IPF_CENTER;
+				entry[sel/ENTRIES]->type &= ~IPF_CENTER;
+				entry[sel/ENTRIES]->type |= center;
+			}
 		}
 	}
 
 	if (input_ui_pressed_repeat(IPT_UI_RIGHT,8))
 	{
@@ -2177,10 +2214,21 @@
 
 				val ++;
 				if (val > 255) val = 255;
 				IP_SET_SENSITIVITY(entry[sel/ENTRIES],val);
 			}
+			else if ((sel % ENTRIES) == 3)
+			/* center */
+			{
+				int center = entry[sel/ENTRIES]->type & IPF_CENTER;
+				if (center)
+					center=0;
+				else
+					center=IPF_CENTER;
+				entry[sel/ENTRIES]->type &= ~IPF_CENTER;
+				entry[sel/ENTRIES]->type |= center;
+			}
 		}
 	}
 
 	if (input_ui_pressed(IPT_UI_SELECT))
 	{
@@ -2484,14 +2532,16 @@
 
 int showgamewarnings(struct mame_bitmap *bitmap)
 {
 	int i;
 	char buf[2048];
+	unsigned mask = GAME_NOT_WORKING | GAME_UNEMULATED_PROTECTION | GAME_WRONG_COLORS | GAME_NO_SOUND;
 
-	if (Machine->gamedrv->flags &
-			(GAME_NOT_WORKING | GAME_UNEMULATED_PROTECTION | GAME_WRONG_COLORS | GAME_IMPERFECT_COLORS |
-			  GAME_NO_SOUND | GAME_IMPERFECT_SOUND | GAME_IMPERFECT_GRAPHICS | GAME_NO_COCKTAIL))
+	if (!options.skip_gameinfo)
+		mask |= GAME_IMPERFECT_COLORS | GAME_IMPERFECT_SOUND | GAME_IMPERFECT_GRAPHICS | GAME_NO_COCKTAIL;
+
+	if ((Machine->gamedrv->flags & mask) != 0)
 	{
 		int done;
 
 		strcpy(buf, ui_getstring (UI_knownproblems));
 		strcat(buf, "\n\n");
@@ -3033,15 +3083,15 @@
 
 
 #ifndef MESS
 enum { UI_SWITCH = 0,UI_DEFCODE,UI_CODE,UI_ANALOG,UI_CALIBRATE,
 		UI_STATS,UI_GAMEINFO, UI_HISTORY,
-		UI_CHEAT,UI_RESET,UI_MEMCARD,UI_EXIT };
+		UI_CHEAT,UI_RESET,UI_MEMCARD,UI_EXIT,UI_OSD };
 #else
 enum { UI_SWITCH = 0,UI_DEFCODE,UI_CODE,UI_ANALOG,UI_CALIBRATE,
 		UI_GAMEINFO, UI_IMAGEINFO,UI_FILEMANAGER,UI_TAPECONTROL,
-		UI_HISTORY,UI_CHEAT,UI_RESET,UI_MEMCARD,UI_EXIT };
+		UI_HISTORY,UI_CHEAT,UI_RESET,UI_MEMCARD,UI_EXIT,UI_OSD };
 #endif
 
 
 #define MAX_SETUPMENU_ITEMS 20
 static const char *menu_item[MAX_SETUPMENU_ITEMS];
@@ -3114,10 +3164,11 @@
 #endif
 #endif
 #endif
 #endif
 
+	menu_item[menu_total] = ui_getstring (UI_osdmenu); menu_action[menu_total++] = UI_OSD;
 	menu_item[menu_total] = ui_getstring (UI_resetgame); menu_action[menu_total++] = UI_RESET;
 	menu_item[menu_total] = ui_getstring (UI_returntogame); menu_action[menu_total++] = UI_EXIT;
 	menu_item[menu_total] = 0; /* terminate array */
 }
 
@@ -3174,10 +3225,13 @@
 				res = displayhistory(bitmap, sel >> SEL_BITS);
 				break;
 			case UI_CHEAT:
 				res = cheat_menu(bitmap, sel >> SEL_BITS);
 				break;
+			case UI_OSD :
+				res = osd_menu(bitmap, sel >> SEL_BITS);
+				break;
 #ifndef MESS
 #ifndef TINY_COMPILE
 #ifndef CPSMAME
 #ifndef MMSND
 			case UI_MEMCARD:
@@ -3228,10 +3282,11 @@
 			case UI_TAPECONTROL:
 			#endif
 			case UI_HISTORY:
 			case UI_CHEAT:
 			case UI_MEMCARD:
+			case UI_OSD :
 				sel |= 1 << SEL_BITS;
 				schedule_full_refresh();
 				break;
 
 			case UI_RESET:
@@ -3762,10 +3817,63 @@
 	vsprintf(messagetext,text,arg);
 	va_end(arg);
 	messagecounter = seconds * Machine->drv->frames_per_second;
 }
 
+int on_exit_menu(struct mame_bitmap* bitmap, int selected)
+{
+	const char * exit_menu_item[8];
+	char flag[8];
+
+	int sel;
+	int total;
+
+	sel = selected - 1;
+
+	total = 0;
+
+	exit_menu_item[total] = "Continue";
+	flag[total] = 0;
+	++total;
+
+	exit_menu_item[total] = "Exit";
+	flag[total] = 0;
+	++total;
+
+	exit_menu_item[total] = 0;
+	flag[total] = 0;
+
+	ui_displaymenu(bitmap,exit_menu_item,0,flag,sel,0);
+
+	if (input_ui_pressed_repeat(IPT_UI_DOWN,8)) {
+		sel = (sel + 1) % total;
+	}
+
+	if (input_ui_pressed_repeat(IPT_UI_UP,8)) {
+		sel = (sel + total - 1) % total;
+	}
+
+	if (input_ui_pressed(IPT_UI_SELECT)) {
+		if (sel == 1)
+			sel = -2;
+		if (sel == 0)
+			sel = -1;
+	}
+
+	if (input_ui_pressed(IPT_UI_CANCEL)) {
+		sel = -1;
+	}
+
+	if (sel == -1 || sel == -2)
+	{
+		/* tell updatescreen() to clean after us */
+		schedule_full_refresh();
+	}
+
+	return sel + 1;
+}
+
 void do_loadsave(struct mame_bitmap *bitmap, int request_loadsave)
 {
 	int file = 0;
 
 	mame_pause(1);
@@ -3943,17 +4051,42 @@
 
 	/* if the user pressed F12, save the screen to a file */
 	if (input_ui_pressed(IPT_UI_SNAPSHOT))
 		artwork_save_snapshot(bitmap);
 
+	/* save the sound to a file */
+	if (input_ui_pressed(IPT_UI_RECORD_START))
+		osd_record_start();
+	if (input_ui_pressed(IPT_UI_RECORD_STOP))
+		osd_record_stop();
+
 	/* This call is for the cheat, it must be called once a frame */
 	if (options.cheat) DoCheat(bitmap);
 
 	/* if the user pressed ESC, stop the emulation */
 	/* but don't quit if the setup menu is on screen */
-	if (setup_selected == 0 && input_ui_pressed(IPT_UI_CANCEL))
-		return 1;
+	if (setup_selected == 0) {
+		int res = osd_input_exit_filter(input_ui_pressed(IPT_UI_CANCEL));
+		if (res > 1)
+			return 1;
+		if (res != 0) {
+			osd_sound_enable(0);
+			osd_pause(1);
+
+			res = 1;
+			while (res > 0) {
+				res = on_exit_menu(bitmap,res);
+				update_video_and_audio();
+			}
+
+			osd_pause(0);
+			osd_sound_enable(1);
+
+			if (res < 0)
+				return 1;
+		}
+	}
 
 	if (setup_selected == 0 && input_ui_pressed(IPT_UI_CONFIGURE))
 	{
 		setup_selected = -1;
 		if (osd_selected != 0)
@@ -4056,10 +4189,14 @@
 			profiler_mark(PROFILER_END);
 
 			if (input_ui_pressed(IPT_UI_SNAPSHOT))
 				artwork_save_snapshot(bitmap);
 
+			if (input_ui_pressed(IPT_UI_RECORD_START))
+				osd_record_start();
+			if (input_ui_pressed(IPT_UI_RECORD_STOP))
+				osd_record_stop();
 
 			if (input_ui_pressed(IPT_UI_SAVE_STATE))
 				do_loadsave(bitmap, LOADSAVE_SAVE);
 
 			if (input_ui_pressed(IPT_UI_LOAD_STATE))
@@ -4068,11 +4205,11 @@
 			/* if the user pressed F4, show the character set */
 			if (input_ui_pressed(IPT_UI_SHOW_GFX))
 				showcharset(bitmap);
 
 			if (setup_selected == 0 && input_ui_pressed(IPT_UI_CANCEL))
-				return 1;
+				break;
 
 			if (setup_selected == 0 && input_ui_pressed(IPT_UI_CONFIGURE))
 			{
 				setup_selected = -1;
 				if (osd_selected != 0)
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/vidhrdw/cave.c src/vidhrdw/cave.c
--- src.ori/vidhrdw/cave.c	2002-05-25 13:32:48.000000000 +0200
+++ src/vidhrdw/cave.c	2003-04-09 20:37:49.000000000 +0200
@@ -1532,10 +1532,13 @@
 {
 	int pri, pri2;
 	int layers_ctrl = -1;
 	int background_color;
 
+	/* Set the correct destination if SMP is active */
+	blit.baseaddr = Machine->scrbitmap->line[0];
+
 	/* Choose the tilemap to display (8x8 tiles or 16x16 tiles) */
 	if (tilemap_0)
 	{	tiledim_0 = cave_vctrl_0[ 1 ] & 0x2000;
 		if (tiledim_0 != old_tiledim_0)	tilemap_mark_all_tiles_dirty(tilemap_0);
 		old_tiledim_0 = tiledim_0;		}
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/vidhrdw/seta2.c src/vidhrdw/seta2.c
--- src.ori/vidhrdw/seta2.c	2003-03-18 21:00:45.000000000 +0100
+++ src/vidhrdw/seta2.c	2003-04-11 19:59:19.000000000 +0200
@@ -310,15 +310,15 @@
 				int flipy = (attr & 0x0008);
 				int color = (attr & 0xffe0) >> 5;
 
 				int sizex = use_global_size ? global_sizex : sx;
 				int sizey = use_global_size ? global_sizey : sy;
+				int x,y;
+
 				sizex = (1 << ((sizex & 0x0c00)>> 10))-1;
 				sizey = (1 << ((sizey & 0x0c00)>> 10))-1;
 
-				int x,y;
-
 				sx += xoffs;
 				sy += yoffs;
 
 				sx = (sx & 0x1ff) - (sx & 0x200);
 				sy &= 0x1ff;
diff -U 5 --new-file --recursive -x msdos -x unix -x windows -x windowsui src.ori/x86drc.h src/x86drc.h
--- src.ori/x86drc.h	2003-03-29 12:58:28.000000000 +0100
+++ src/x86drc.h	2003-04-11 19:48:14.000000000 +0200
@@ -725,38 +725,38 @@
 #define _fnstcw_m16abs(addr) \
 do { OP1(0xd9); MODRM_MABS(7, addr); } while (0)
 
 
 
-#define _fabs(addr) \
+#define _fabs() \
 do { OP1(0xd9); OP1(0xe1); } while (0)
 
-#define _faddp(addr) \
+#define _faddp() \
 do { OP1(0xde); OP1(0xc1); } while (0)
 
-#define _fchs(addr) \
+#define _fchs() \
 do { OP1(0xd9); OP1(0xe0); } while (0)
 
-#define _fcompp(addr) \
+#define _fcompp() \
 do { OP1(0xde); OP1(0xd9); } while (0)
 
-#define _fdivp(addr) \
+#define _fdivp() \
 do { OP1(0xde); OP1(0xf9); } while (0)
 
-#define _fmulp(addr) \
+#define _fmulp() \
 do { OP1(0xde); OP1(0xc9); } while (0)
 
-#define _fsqrt(addr) \
+#define _fsqrt() \
 do { OP1(0xd9); OP1(0xfa); } while (0)
 
-#define _fsubp(addr) \
+#define _fsubp() \
 do { OP1(0xde); OP1(0xe9); } while (0)
 
-#define _fsubrp(addr) \
+#define _fsubrp() \
 do { OP1(0xde); OP1(0xe1); } while (0)
 
-#define _fucompp(addr) \
+#define _fucompp() \
 do { OP1(0xda); OP1(0xe9); } while (0)
 
 
 
 #define _fld1() \
