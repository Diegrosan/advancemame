diff -u -B -b ../../../svgalib/endianes.h ./endianes.h
--- ../../../svgalib/endianes.h	2001-05-29 11:00:22.000000000 +0200
+++ ./endianes.h	2002-08-10 16:23:46.000000000 +0200
@@ -1,14 +1,16 @@
-#include <endian.h>
-#include <byteswap.h>
+#ifndef __ENDIANES_H
+#define __ENDIANES_H
 
-#if __BYTE_ORDER == __BIG_ENDIAN
-
-#define LE32(x) bswap_32(x)
-#define BE32(x) (x)
+#ifndef __MSDOS__
+#error This module is for MSDOS only
+#endif
 
-#else /* little endian */
+static __inline__ unsigned LE32(unsigned _val) {
+	return _val;
+}
 
-#define LE32(x) (x)
-#define BE32(x) bswap_32(x)
+static __inline__ unsigned BE32(unsigned _val) {
+	return (_val << 24) | ((_val&0xff00) << 8) | ((_val&0xff0000) >> 8) | (_val >> 24);
+}
 
 #endif
diff -u -B -b ../../../svgalib/libvga.h ./libvga.h
--- ../../../svgalib/libvga.h	2002-04-27 11:26:26.000000000 +0200
+++ ./libvga.h	2002-08-10 16:23:46.000000000 +0200
@@ -17,6 +17,8 @@
 typedef unsigned short CARD16;
 typedef unsigned char CARD8;
 
+#include "libdos.h"
+
 /* --------------------- Macro definitions shared by library modules */
 
 /* VGA index register ports */
diff -u -B -b ../../../svgalib/drivers/apm.c drivers/apm.c
--- ../../../svgalib/drivers/apm.c	2002-04-30 09:37:42.000000000 +0200
+++ drivers/apm.c	2002-06-16 17:34:18.000000000 +0200
@@ -33,8 +33,8 @@
 /* New style driver interface. */
 #include "timing.h"
 #include "vgaregs.h"
-#include "vgammvgaio.h"
-#include "interface.h"
+#include "vgammvga.h"
+#include "interfac.h"
 
 #define APMREG_SAVE(i) (VGA_TOTAL_REGS+i)
 #define APM_TOTAL_REGS (VGA_TOTAL_REGS + 38)
@@ -386,7 +386,7 @@
 	return 1;
     }
 
-    moderegs = malloc(APM_TOTAL_REGS);
+    moderegs = calloc(APM_TOTAL_REGS,1);
 
     apm_initializemode(moderegs, modetiming, modeinfo, mode);
     free(modetiming);
diff -u -B -b ../../../svgalib/drivers/ark.c drivers/ark.c
--- ../../../svgalib/drivers/ark.c	2002-04-20 23:32:26.000000000 +0200
+++ drivers/ark.c	2002-06-16 17:34:20.000000000 +0200
@@ -34,7 +34,7 @@
 #include "timing.h"
 #include "ramdac/ramdac.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "accel.h"
 
 
@@ -467,7 +467,7 @@
 	free(modeinfo);
 	return 1;
     }
-    moderegs = malloc(ARK_TOTAL_REGS);
+    moderegs = calloc(ARK_TOTAL_REGS,1);
 
     ark_initializemode(moderegs, modetiming, modeinfo);
     free(modetiming);
@@ -876,8 +876,6 @@
 	else if ((id == 0x13) || (id == 0x14) || (id == 0x20))
 	    ark_chip = ARK2000PV;
 	else {
-	    fprintf(stderr,"svgalib: ark: Unknown chiptype %d.\n",
-		   id);
 	    return -1;
 	}
 	val = __svgalib_inSR(0x10);
diff -u -B -b ../../../svgalib/drivers/banshee.c drivers/banshee.c
--- ../../../svgalib/drivers/banshee.c	2002-04-30 09:38:40.000000000 +0200
+++ drivers/banshee.c	2002-06-16 17:34:22.000000000 +0200
@@ -9,12 +9,12 @@
 #include "vga.h"
 #include "libvga.h"
 #include "driver.h"
-#include "vgarelvgaio.h"
+#include "vgarelvg.h"
 
 /* New style driver interface. */
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
 
 #define BANSHEEREG_SAVE(i) (VGA_TOTAL_REGS+i)
@@ -305,7 +305,7 @@
 	return 1;
     }
 
-    moderegs = malloc(BANSHEE_TOTAL_REGS);
+    moderegs = calloc(BANSHEE_TOTAL_REGS,1);
 
     banshee_initializemode(moderegs, &modetiming, modeinfo, mode);
 
diff -u -B -b ../../../svgalib/drivers/et6000.c drivers/et6000.c
--- ../../../svgalib/drivers/et6000.c	2002-04-10 13:57:56.000000000 +0200
+++ drivers/et6000.c	2002-06-16 17:34:24.000000000 +0200
@@ -8,13 +8,11 @@
 #include <fcntl.h>
 #include <sys/types.h>
 #include <sys/mman.h>
-#include <asm/page.h>
 #include "vga.h"
 #include "libvga.h"
 #include "driver.h"
-#include <linux/pci.h>
 #include "timing.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgaregs.h"
 #include "vgapci.h"
 
@@ -690,7 +688,7 @@
 	free(modeinfo);
 	return(1);
       }
-    moderegs = malloc(ET6000_TOTAL_REGS);
+    moderegs = calloc(ET6000_TOTAL_REGS,1);
     et6000_initializemode(moderegs,modetiming,modeinfo,mode);
     cursor_doublescan = modetiming->flags & DOUBLESCAN ?1:0;
 #ifdef DBG
diff -u -B -b ../../../svgalib/drivers/g400.c drivers/g400.c
--- ../../../svgalib/drivers/g400.c	2002-04-30 09:36:26.000000000 +0200
+++ drivers/g400.c	2002-06-16 17:34:26.000000000 +0200
@@ -19,12 +19,12 @@
 #include "driver.h"
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
 #include "mga.h"
 #define SECONDCRTC 0
-#include "mga_g450pll.c"
-#include "vgammvgaio.h"
+#include "mga_g450.c"
+#include "vgammvga.h"
 
 #define SKREG_SAVE(i) (VGA_TOTAL_REGS+i)
 #define G400_TOTAL_REGS (VGA_TOTAL_REGS + 32 + 176 + 4 + 32)
@@ -597,7 +597,7 @@
 	return 1;
     }
 
-    moderegs = malloc(G400_TOTAL_REGS);
+    moderegs = calloc(G400_TOTAL_REGS,1);
 
     g400_initializemode(moderegs, modetiming, modeinfo, mode);
     free(modetiming);
diff -u -B -b ../../../svgalib/drivers/i740.c drivers/i740.c
--- ../../../svgalib/drivers/i740.c	2002-04-30 09:36:32.000000000 +0200
+++ drivers/i740.c	2002-06-16 17:34:30.000000000 +0200
@@ -15,10 +15,10 @@
 #include "driver.h"
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
 #include "i740_reg.h"
-#include "vgammvgaio.h"
+#include "vgammvga.h"
 
 typedef struct {
     unsigned char DisplayControl;
@@ -576,7 +576,7 @@
 	return 1;
     }
 
-    moderegs = malloc(I740_TOTAL_REGS);
+    moderegs = calloc(I740_TOTAL_REGS,1);
 
     i740_initializemode(moderegs, modetiming, modeinfo, mode);
     free(modetiming);
diff -u -B -b ../../../svgalib/drivers/i810.c drivers/i810.c
--- ../../../svgalib/drivers/i810.c	2002-05-03 19:41:36.000000000 +0200
+++ drivers/i810.c	2002-08-17 10:58:04.000000000 +0200
@@ -3,7 +3,7 @@
   written by Matan Ziv-Av.
 */
 
-#define USE_GTT 1
+/* #define USE_GTT 1 */
 
 #include <stdlib.h>
 #include <stdio.h>		
@@ -16,13 +16,13 @@
 #include "driver.h"
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
 #include "i810_reg.h"
-#include "i810_wmark.c"
-#include "vgammvgaio.h"
+#include "i810_wma.c"
+#include "vgammvga.h"
 #include <sys/ioctl.h>
-#include "svgalib_helper.h"
+/* #include "svgalib_helper.h" */
 
 typedef struct {
 /* 00 */
@@ -489,7 +489,7 @@
 	return 1;
     }
 
-    moderegs = malloc(I810_TOTAL_REGS);
+    moderegs = calloc(I810_TOTAL_REGS,1);
 
     initializemode(moderegs, modetiming, modeinfo, mode);
     free(modetiming);
@@ -693,7 +693,7 @@
 static int init(int force, int par1, int par2)
 {
     unsigned long buf[64];
-    unsigned int t, i, id;
+    unsigned int id;
     int found=0;
     
     found=__svgalib_pci_find_vendor_vga(VENDOR_ID,buf,0);
diff -u -B -b ../../../svgalib/drivers/laguna.c drivers/laguna.c
--- ../../../svgalib/drivers/laguna.c	2002-05-19 12:54:58.000000000 +0200
+++ drivers/laguna.c	2002-06-16 17:34:34.000000000 +0200
@@ -19,7 +19,7 @@
 #include "driver.h"
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
 
 #include "lagunaio.h"
@@ -399,7 +399,7 @@
 	return 1;
     }
 
-    moderegs = malloc(LAGUNA_TOTAL_REGS);
+    moderegs = calloc(LAGUNA_TOTAL_REGS,1);
 
     laguna_initializemode(moderegs, modetiming, modeinfo, mode);
     free(modetiming);
diff -u -B -b ../../../svgalib/drivers/millenni.c drivers/millenni.c
--- ../../../svgalib/drivers/millenni.c	2002-04-30 09:35:06.000000000 +0200
+++ drivers/millenni.c	2002-06-16 17:34:38.000000000 +0200
@@ -11,9 +11,9 @@
 #include "driver.h"
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
-#include "vgammvgaio.h"
+#include "vgammvga.h"
 #include "mga.h"
 
 static int mil_init(int, int, int);
@@ -696,7 +696,7 @@
 	return 1;
     }
 
-    moderegs = malloc(MIL_TOTAL_REGS + 60);
+    moderegs = calloc(MIL_TOTAL_REGS + 60,1);
 
     mil_initializemode(moderegs, modetiming, modeinfo, mode);
     free(modetiming);
diff -u -B -b ../../../svgalib/drivers/mx.c drivers/mx.c
--- ../../../svgalib/drivers/mx.c	2002-04-30 09:34:50.000000000 +0200
+++ drivers/mx.c	2002-06-16 17:34:40.000000000 +0200
@@ -24,7 +24,7 @@
 /* New style driver interface. */
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
 
 #define MXREG_SAVE(i) (VGA_TOTAL_REGS+i)
@@ -370,7 +370,7 @@
 	return 1;
     }
 
-    moderegs = malloc(MX_TOTAL_REGS);
+    moderegs = calloc(MX_TOTAL_REGS,1);
 
     mx_initializemode(moderegs, modetiming, modeinfo, mode);
     free(modetiming);
diff -u -B -b ../../../svgalib/drivers/nv3.c drivers/nv3.c
--- ../../../svgalib/drivers/nv3.c	2002-05-01 00:13:24.000000000 +0200
+++ drivers/nv3.c	2002-06-16 17:34:40.000000000 +0200
@@ -27,7 +27,7 @@
 /* New style driver interface. */
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "nv3ref.h"
 #include "nvreg.h"
 #include "vgapci.h"
@@ -411,7 +411,7 @@
 	return 1;
     }
 
-    moderegs = malloc(NV3_TOTAL_REGS);
+    moderegs = calloc(NV3_TOTAL_REGS,1);
 
     nv3_initializemode(moderegs, modetiming, modeinfo, mode);
     free(modetiming);
diff -u -B -b ../../../svgalib/drivers/pm2.c drivers/pm2.c
--- ../../../svgalib/drivers/pm2.c	2002-06-07 23:09:30.000000000 +0200
+++ drivers/pm2.c	2002-08-17 10:57:52.000000000 +0200
@@ -12,9 +12,9 @@
 #include "driver.h"
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
-#include "glint_regs.h"
+#include "glint_re.h"
 #include "pm2io.h"
 
 #define REG_SAVE(i) (VGA_TOTAL_REGS+i)
@@ -764,6 +764,7 @@
             __svgalib_pm2_driverspecs.cursor = pm2v_cursor;
             break;
         default:
+            break;
     }
     
     if (__svgalib_driver_report) {
diff -u -B -b ../../../svgalib/drivers/r128.c drivers/r128.c
--- ../../../svgalib/drivers/r128.c	2002-06-12 13:02:54.000000000 +0200
+++ drivers/r128.c	2002-08-18 17:12:18.000000000 +0200
@@ -13,9 +13,9 @@
 #include "driver.h"
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
-#include "endianess.h"
+#include "endianes.h"
 #include "r128_reg.h"
 
 static enum { Rage128=0, Radeon } chiptype; /* r128io needs to know */
@@ -773,7 +773,6 @@
     };
 
     if (freq > pll->max_pll_freq)      freq = pll->max_pll_freq;
-    if (freq * 12 < pll->min_pll_freq) freq = pll->min_pll_freq / 12;
 
     for (post_div = &post_divs[0]; post_div->divider; ++post_div) {
 	save->pll_output_freq = post_div->divider * freq;
@@ -781,6 +780,11 @@
 	    && save->pll_output_freq <= pll->max_pll_freq) break;
     }
 
+	if (!post_div->divider) {
+		post_div = post_divs + 7;
+		save->pll_output_freq = post_div->divider * freq;
+	}
+
     save->dot_clock_freq = freq;
     save->feedback_div   = R128Div(pll->reference_div * save->pll_output_freq,
 				   pll->reference_freq);
@@ -817,7 +821,6 @@
     };
 
     if (freq > pll->max_pll_freq)      freq = pll->max_pll_freq;
-    if (freq * 12 < pll->min_pll_freq) freq = pll->min_pll_freq / 12;
 
     for (post_div = &post_divs[0]; post_div->divider; ++post_div) {
 	save->pll_output_freq = post_div->divider * freq;
@@ -825,6 +828,11 @@
 	    && save->pll_output_freq <= pll->max_pll_freq) break;
     }
 
+	if (!post_div->divider) {
+		post_div = post_divs + 6;
+		save->pll_output_freq = post_div->divider * freq;
+	}
+
     save->dot_clock_freq = freq;
     save->feedback_div   = R128Div(pll->reference_div * save->pll_output_freq,
 				   pll->reference_freq);
@@ -1075,7 +1083,7 @@
 	return 1;
     }
 
-    moderegs = malloc(R128_TOTAL_REGS);
+    moderegs = calloc(R128_TOTAL_REGS,1);
 
     r128_initializemode(moderegs, modetiming, modeinfo, mode);
     free(modetiming);
@@ -1382,7 +1390,7 @@
         pll.xclk           = R128_BIOS16(pll_info_block + 0x08);
         munmap(BIOS_POINTER, 64*1024);
     }
-#if 1
+#if 0
 fprintf(stderr,"pll: %i %i %i %i %i\n",pll.reference_freq,pll.reference_div,
     pll.min_pll_freq,    pll.max_pll_freq, pll.xclk);
 #endif
diff -u -B -b ../../../svgalib/drivers/r128_reg.h drivers/r128_reg.h
--- ../../../svgalib/drivers/r128_reg.h	2002-06-08 13:05:38.000000000 +0200
+++ drivers/r128_reg.h	2002-06-16 17:34:50.000000000 +0200
@@ -50,13 +50,13 @@
 
 #define R128_TIMEOUT 2000000
 
-#define MMIO_IN8(dummy, addr)  (*(unsigned char *)(MMIO_POINTER + addr))
-#define MMIO_IN16(dummy, addr)  (*(unsigned short *)(MMIO_POINTER + addr))
-#define MMIO_IN32(dummy, addr)  LE32(*(unsigned int *)(MMIO_POINTER + addr))
-
-#define MMIO_OUT8(dummy, addr, val)  (*(unsigned char *)(MMIO_POINTER + addr) = val)
-#define MMIO_OUT16(dummy, addr, val)  (*(unsigned short *)(MMIO_POINTER + addr) = val)
-#define MMIO_OUT32(dummy, addr, val)  (*(unsigned int *)(MMIO_POINTER + addr) = LE32(val))
+#define MMIO_IN8(dummy, addr)  (*(volatile unsigned char *)(MMIO_POINTER + addr))
+#define MMIO_IN16(dummy, addr)  (*(volatile unsigned short *)(MMIO_POINTER + addr))
+#define MMIO_IN32(dummy, addr)  LE32(*(volatile unsigned int *)(MMIO_POINTER + addr))
+
+#define MMIO_OUT8(dummy, addr, val)  (*(volatile unsigned char *)(MMIO_POINTER + addr) = val)
+#define MMIO_OUT16(dummy, addr, val)  (*(volatile unsigned short *)(MMIO_POINTER + addr) = val)
+#define MMIO_OUT32(dummy, addr, val)  (*(volatile unsigned int *)(MMIO_POINTER + addr) = LE32(val))
 
 				/* Memory mapped register access macros */
 #define INREG8(addr)        MMIO_IN8(R128MMIO, addr)
diff -u -B -b ../../../svgalib/drivers/rage.c drivers/rage.c
--- ../../../svgalib/drivers/rage.c	2002-04-27 17:57:58.000000000 +0200
+++ drivers/rage.c	2002-06-16 17:34:54.000000000 +0200
@@ -38,7 +38,7 @@
 /* New style driver interface. */
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
 #include "rage.h"
 
@@ -880,7 +880,7 @@
 	return 1;
     }
 
-    moderegs = malloc(MAX_REGS);
+    moderegs = calloc(MAX_REGS,1);
     
     ATINewHWPtr=(ATIHWPtr)(moderegs+VGA_TOTAL_REGS); 
 
diff -u -B -b ../../../svgalib/drivers/renditio.c drivers/renditio.c
--- ../../../svgalib/drivers/renditio.c	2002-04-20 23:45:32.000000000 +0200
+++ drivers/renditio.c	2002-06-16 17:34:56.000000000 +0200
@@ -12,13 +12,13 @@
 #include "driver.h"
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
 #include "v2kregs.h"
 
 static int io_base;
 
-#include "renditionio.h"
+#include "renditio.h"
 
 typedef struct {
     CARD8  memendian;
@@ -360,7 +360,7 @@
 	return 1;
     }
 
-    moderegs = malloc(TOTAL_REGS);
+    moderegs = calloc(TOTAL_REGS,1);
 
     initializemode(moderegs, modetiming, modeinfo, mode);
     free(modetiming);
diff -u -B -b ../../../svgalib/drivers/s3.c drivers/s3.c
--- ../../../svgalib/drivers/s3.c	2002-04-10 13:57:56.000000000 +0200
+++ drivers/s3.c	2002-06-16 17:35:02.000000000 +0200
@@ -95,9 +95,9 @@
 #include "driver.h"
 #include "timing.h"
 #include "ramdac/ramdac.h"
-#include "clockchip/clockchip.h"
+#include "clockchi/clockchi.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "8514a.h"
 #include "vgapci.h"
 
@@ -566,7 +566,7 @@
     __svgalib_outCR(0x39, regs[EXT + 0x39 - 0x30] = cr39);
     __svgalib_outCR(0x38, regs[EXT + 0x38 - 0x30] = cr38);
 #if 0
-#include "ramdac/IBMRGB52x.h"
+#include "ramdac/ibmrgb52.h"
 
     do {
 	unsigned char m, n, df;
@@ -1090,7 +1090,7 @@
 {
     ModeInfo *modeinfo;
     ModeTiming *modetiming;
-    unsigned char moderegs[S3_TOTAL_REGS];
+    unsigned char* moderegs;
     int res;
 
     if (IS_IN_STANDARD_VGA_DRIVER(mode)) {
@@ -1126,12 +1126,17 @@
     modeinfo->lineWidth = s3_adjlinewidth(modeinfo->lineWidth);
     CI.xbytes = modeinfo->lineWidth;
 
+    moderegs = calloc(S3_TOTAL_REGS,1);
+
     s3_initializemode(moderegs, modetiming, modeinfo);
     free(modeinfo);
     free(modetiming);
 
     __svgalib_setregs(moderegs);	/* Set standard regs. */
     s3_setregs(moderegs, mode);	/* Set extended regs. */
+
+    free(moderegs);
+
     return 0;
 }
 
diff -u -B -b ../../../svgalib/drivers/savage.c drivers/savage.c
--- ../../../svgalib/drivers/savage.c	2002-04-20 10:07:36.000000000 +0200
+++ drivers/savage.c	2002-06-16 17:35:04.000000000 +0200
@@ -18,10 +18,10 @@
 #include "driver.h"
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
-#include "endianess.h"
-#include "vgammvgaio.h"
+#include "endianes.h"
+#include "vgammvga.h"
 
 #define SAVAGEREG_SAVE(i) (VGA_TOTAL_REGS+i)
 #define TOTAL_REGS (VGA_TOTAL_REGS + 64)
@@ -511,7 +511,7 @@
         {31,  0, 4, 170000},
         {31,  0, 3, 135000},
         {31,  0, 4, 220000},
-        {31,  0, 3, 135000},
+        {31,  0, 4, 135000},
         {31,  0, 4, 170000},
         {31,  0, 4, 170000},
         {127, 0, 4, 180000},
@@ -525,7 +525,7 @@
     vgaS3VPtr new = (vgaS3VPtr)(moderegs+VGA_TOTAL_REGS);
    
     if(modeinfo->bitsPerPixel==16) {
-        if((chipset==VIRGE)|| (chipset==TRIO64)) {
+        if((chipset==VIRGE)|| (chipset==TRIO64) || (chipset==VIRGEDX)) {
             modetiming->HDisplay *=2;
             modetiming->HSyncStart *=2;
             modetiming->HSyncEnd *=2;
@@ -813,7 +813,7 @@
 	return 1;
     }
 
-    moderegs = malloc(TOTAL_REGS);
+    moderegs = calloc(TOTAL_REGS,1);
 
     initializemode(moderegs, modetiming, modeinfo, mode);
     free(modetiming);
diff -u -B -b ../../../svgalib/drivers/sis.c drivers/sis.c
--- ../../../svgalib/drivers/sis.c	2002-04-30 09:34:24.000000000 +0200
+++ drivers/sis.c	2002-06-16 17:35:06.000000000 +0200
@@ -32,9 +32,9 @@
 #include "driver.h"
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
-#include "vgarelvgaio.h"
+#include "vgarelvg.h"
 
 #define SISREG_SAVE(i) (VGA_TOTAL_REGS+i)
 #define SIS_TOTAL_REGS (VGA_TOTAL_REGS + 64 + 40 + 20)
@@ -486,7 +486,7 @@
 	return 1;
     }
 
-    moderegs = malloc(SIS_TOTAL_REGS);
+    moderegs = calloc(SIS_TOTAL_REGS,1);
     
     if(chip>=SIS_300) 
         sis_300_initializemode(moderegs, modetiming, modeinfo, mode); else
diff -u -B -b ../../../svgalib/drivers/trident.c drivers/trident.c
--- ../../../svgalib/drivers/trident.c	2002-04-10 13:57:56.000000000 +0200
+++ drivers/trident.c	2002-06-16 17:35:08.000000000 +0200
@@ -13,11 +13,11 @@
 #include "driver.h"
 #include "timing.h"
 #include "vgaregs.h"
-#include "interface.h"
+#include "interfac.h"
 #include "vgapci.h"
 #include "trident.h"
-#include "vgammvgaio.h"
-#include "endianess.h"
+#include "vgammvga.h"
+#include "endianes.h"
 
 #define TOTAL_REGS (VGA_TOTAL_REGS + 500)
 
@@ -706,6 +706,7 @@
     		pReg->tridentRegsDAC[0x00] |= 0x20;	/* mux mode */
 	    }	
 #endif
+	    break;
     }
 
 
@@ -886,7 +887,7 @@
 	return 1;
     }
 
-    moderegs = malloc(TOTAL_REGS);
+    moderegs = calloc(TOTAL_REGS,1);
 
     initializemode(moderegs, modetiming, modeinfo, mode);
     free(modetiming);
diff -u -B -b ../../../svgalib/ramdac/ibmrgb52.c ramdac/ibmrgb52.c
--- ../../../svgalib/ramdac/ibmrgb52.c	2002-04-10 13:57:56.000000000 +0200
+++ ramdac/ibmrgb52.c	2002-06-16 17:35:12.000000000 +0200
@@ -15,7 +15,7 @@
 #include "driver.h"		/* for __svgalib_driver_report */
 #include "ramdac.h"
 
-#include "IBMRGB52x.h"
+#include "ibmrgb52.h"
 
 #define IBMRGB52x_STATESIZE	0x101
 
diff -u -B -b ../../../svgalib/clockchi/icd2061a.c clockchi/icd2061a.c
--- ../../../svgalib/clockchi/icd2061a.c	2002-04-10 13:57:56.000000000 +0200
+++ clockchi/icd2061a.c	2002-06-16 17:34:16.000000000 +0200
@@ -13,7 +13,7 @@
 #include "timing.h"
 #include "libvga.h"
 #include "ramdac/ramdac.h"
-#include "clockchip.h"
+#include "clockchi.h"
 #include "driver.h"
 #include "vga.h"
 
