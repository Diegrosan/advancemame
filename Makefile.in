#############################################################################
# User configuration
#

# Installation prefix (only for Unix):
PREFIX=@prefix@

# Select the emu executable (mame by default)
# The available choices are: mame, neomame, cpmame, mess, pac
#CONF_EMU=mame

# Uncommment the host operating system (default is the current one):
#CONF_HOST=unix
#CONF_HOST=dos
#CONF_HOST=windows

# Uncomment the main system library to use.
# The available choices for unix are :
#   linux, sdl (default is linux)
# The available choices for DOS are :
#   dos (default is dos)
# The available choices for Windows are :
#   sdl (default is sdl)
#
# The dos system uses:
#   SVGALIB, VESAtweak and VGAtweak for the graphics output
#   VGAtweak for the text output
#   SEAL and Allegro for the sound output
#   Allegro for the input
# This system is able to directly access and completly control the graphics
# output of your video board.
#
# The linux system uses:
#   SVGALIB and Frame Buffer Consolle for the graphics output
#   SLang for the text output
#   OSS for the sound output
#   SVGALIB for the input
# This system is able to directly access and completly control the graphics
# output of your video board.
#
# The sdl system uses:
#   SDL for the graphics output
#   none for the text output (no text mode programs available)
#   SDL for the sound output
#   SDL for the input
# This system can be used to show the programs in a Window Manager, but
# it's unable to completly control the graphics output. It isn't a good
# choice for a fullscreen use of the programs.
#
#CONF_SYSTEM=linux
#CONF_SYSTEM=dos
#CONF_SYSTEM=sdl

# Uncomment and set to "yes" to enable the SMP (Multiprocessor) code (default yes):
#CONF_SMP=yes

# Select the optimization flags: (optimized build for 586 by default)
# The available choices for the -march= option with gcc-2.95 are:
#   i386, i486, i586, i686
# The available choices for the -march= option with gcc-3.0 are:
#   i386, i486, i586, pentium, pentium-mmx, i686, pentiumpro, k6, athlon
# The available choices for the -march= option with gcc-3.1 are:
#   i386, i486, i586, pentium, pentium-mmx, i686, pentiumpro, pentium2,
#   pentium3, pentium4, k6, k6-2, k6-3, athlon, athlon-tbird, athlon-4,
#   athlon-xp, athlon-mp
# Optimized build for i586
#CONF_CFLAGS_OPT=-O3 -march=i586 -fomit-frame-pointer -Wall -Wno-sign-compare -Wno-unused
# Optimized build for i686
#CONF_CFLAGS_OPT=-O3 -march=i686 -fomit-frame-pointer -Wall -Wno-sign-compare -Wno-unused
# Optimized build for k6
#CONF_CFLAGS_OPT=-O3 -march=k6 -fomit-frame-pointer -Wall -Wno-sign-compare -Wno-unused
# Profile build
#CONF_CFLAGS_OPT=-O3 -pg -Wall -Wno-sign-compare -Wno-unused
# Debug build
#CONF_CFLAGS_OPT=-O0 -g -Wall -Wno-sign-compare -Wno-unused

# Select the optimization linker flags: (optimized build by default)
# Optimized build
#CONF_LDFLAGS=-s
# Debug/Profile build
#CONF_LDFLAGS=-g

# Uncomment and set to "yes" to compile the MAME debugger (default no):
#CONF_DEBUGGER=no

# Uncomment and set to "yes" to compress the executable (default no):
#CONF_COMPRESS=no

# Uncomment and set to "yes" to enable the debug code (default no):
#CONF_DEBUG=no

#############################################################################
# Global configuration

ifndef CONF
CONF=@CONF@
endif

ifeq ($(CONF),yes)
CONF_EMU=@CONF_EMU@
CONF_BUILD=@CONF_BUILD@
CONF_HOST=@CONF_HOST@
CONF_SYSTEM=@CONF_SYSTEM@
CONF_SMP=@CONF_SMP@
CONF_CFLAGS_ARCH=@CONF_CFLAGS_ARCH@
CONF_CFLAGS_OPT=@CONF_CFLAGS_OPT@
CONF_LDFLAGS=@CONF_LDFLAGS@
CONF_DEBUGGER=@CONF_DEBUGGER@
CONF_COMPRESS=@CONF_COMPRESS@
CONF_DEBUG=@CONF_DEBUG@
endif

#############################################################################
# Global configuration by autotected (it work only for Linux/Dos/Windows)
#

# Automatic EMU detection by source
ifeq ($(CONF_EMU),)
ifneq ($(wildcard src),)
CONF_EMU = mame
endif
endif
ifeq ($(CONF_EMU),)
ifneq ($(wildcard srcmess),)
CONF_EMU = mess
endif
endif
ifeq ($(CONF_EMU),)
ifneq ($(wildcard srcpac),)
CONF_EMU = pac
endif
endif

ifndef CONF_BUILD
UNAME := $(shell uname)
ifneq (,$(findstring Linux,$(UNAME)))
CONF_BUILD=unix
else
ifneq (,$(findstring DOS,$(UNAME)))
CONF_BUILD=dos
else
CONF_BUILD=windows
endif
endif
endif

ifndef CONF_HOST
CONF_HOST=$(CONF_BUILD)
endif

ifndef CONF_SYSTEM
ifeq ($(CONF_HOST),windows)
CONF_SYSTEM=sdl
endif
ifeq ($(CONF_HOST),dos)
CONF_SYSTEM=dos
endif
ifeq ($(CONF_HOST),unix)
CONF_SYSTEM=linux
endif
endif

ifndef CONF_SMP
CONF_SMP=yes
endif

ifndef CONF_CFLAGS_ARCH
CONF_CFLAGS_ARCH = -DUSE_LSB -DUSE_ASM_i586
endif

ifndef CONF_CFLAGS_OPT
CONF_CFLAGS_OPT = -O3 -fomit-frame-pointer -Wall -Wno-sign-compare -Wno-unused
endif

ifndef CONF_LDFLAGS
CONF_LDFLAGS=-s
endif

ifndef CONF_DEBUGGER
CONF_DEBUGGER=no
endif

ifndef CONF_COMPRESS
CONF_COMPRESS=no
endif

ifndef CONF_DEBUG
CONF_DEBUG=no
endif

#############################################################################
# Extra configuration (common for ./configure and autotected)

# Enable the creation of the map files
ifndef CONF_MAP
CONF_MAP=no
endif

# Name of the architecture. Used in the distribution file names.
ifndef CONF_ARCH
CONF_ARCH=blend
endif

############################################################################
# Tools configuration

ifeq ($(CONF),yes)
srcdir=@srcdir@
INSTALL=@INSTALL@
CC=@@CC@
CXX=@@CXX@
LD=@@CC@
LDXX=@@CXX@
AR=@@AR@
ASM=@@ASM@
RC=@@RC@
UPX=@@UPX@
TOUCH=@@TOUCH@
LN_S=@@LN_S@
MD=-@@MKDIR@ -p
RM=@@RM@ -f
ECHO=@@ECHO@
CC_BUILD=@@CC_BUILD@
LD_BUILD=@@CC_BUILD@
CXX_BUILD=@@CXX_BUILD@
LDXX_BUILD=@@CXX_BUILD@
EXE=@EXE@
EXE_BUILD=@EXE_BUILD@
SDLCFLAGS=@SDLCFLAGS@
SDLLIBS=@SDLLIBS@
ZLIBS=@ZLIBS@
ASMFLAGS=@ASMFLAGS@
CFLAGS_BUILD=@CFLAGS_BUILD@
endif

#############################################################################
# Tools configuration by autotected (it work only for Linux/Dos/Windows)
#

ifneq ($(CONF),yes)
srcdir=.
MD = -@mkdir -p
RM = @rm -f
ECHO = @echo
# Don't add the prefix @. This command must be used also in a shell
INSTALL = install

ifeq ($(CONF_HOST),unix)
UPX = @upx -q -q -q
LN_S = @ln -s
EXE =
ASMFLAGS = -f elf
CFLAGS_BUILD = -O0 -DCOMPILER_TARGET_GNUC -DOBJ_TARGET_ELF
ZLIBS = -lz
endif
ifeq ($(CONF_HOST),dos)
UPX = @upx -q -q -q
LN_S = @cp -p
EXE = .exe
ASMFLAGS = -f coff
CFLAGS_BUILD = -O0 -DCOMPILER_TARGET_GNUC -DOBJ_TARGET_COFF
ZLIBS = -lz
endif
ifeq ($(CONF_HOST),windows)
UPX = @upx -q -q -q
LN_S = @cp -p
EXE = .exe
ASMFLAGS = -f coff
CFLAGS_BUILD = -O0 -DCOMPILER_TARGET_GNUC -DOBJ_TARGET_COFF
ZLIBS = -static -lz
endif

ifeq ($(CONF_BUILD),unix)
ASM = @nasm
EXE_BUILD =
CC_BUILD = @gcc
CXX_BUILD = @g++
LD_BUILD = @gcc
LDXX_BUILD = @g++
TOUCH = @touch
ifeq ($(CONF_HOST),unix)
AR = @ar
CC = @gcc
CXX = @g++
LD = @gcc
LDXX = @g++
SDLCFLAGS = $(shell sdl-config --cflags)
SDLLIBS = $(shell sdl-config --libs)
endif
ifeq ($(CONF_HOST),dos)
# Probably you need to changes these to cross compile:
CROSSTARGET = i586-pc-msdosdjgpp
CROSSDIR = /usr/local/gcc-3.0.4-i586-pc-msdosdjgpp
AR = @$(CROSSDIR)/bin/$(CROSSTARGET)-ar
CC = @$(CROSSDIR)/bin/$(CROSSTARGET)-gcc
CXX = @$(CROSSDIR)/bin/$(CROSSTARGET)-g++
LD = @$(CROSSDIR)/bin/$(CROSSTARGET)-gcc -B$(CROSSDIR)/bin/
LDXX = @$(CROSSDIR)/bin/$(CROSSTARGET)-g++ -B$(CROSSDIR)/bin/
endif
ifeq ($(CONF_HOST),windows)
# Probably you need to changes these to cross compile:
CROSSTARGET = i386-mingw32msvc
CROSSDIR = /usr/local/cross-tools
AR = @$(CROSSDIR)/bin/$(CROSSTARGET)-ar
CC = @$(CROSSDIR)/bin/$(CROSSTARGET)-gcc
CXX = @$(CROSSDIR)/bin/$(CROSSTARGET)-g++
LD = @$(CROSSDIR)/bin/$(CROSSTARGET)-gcc -B$(CROSSDIR)/bin/
LDXX = @$(CROSSDIR)/bin/$(CROSSTARGET)-g++ -B$(CROSSDIR)/bin/
RC = @$(CROSSDIR)/bin/$(CROSSTARGET)-windres
SDLCFLAGS = -I$(CROSSDIR)/$(CROSSTARGET)/include/SDL
SDLLIBS = -lSDL -mwindows
endif
endif

ifeq ($(CONF_BUILD),dos)
ASM = @nasm
EXE_BUILD = .exe
CC_BUILD = @gcc
LD_BUILD = @gcc
CXX_BUILD = @gxx
LDXX_BUILD = @gxx
AR = @ar
CC = @gcc
CXX = @gxx
LD = @gcc
LDXX = @gxx
TOUCH = @rem
endif

ifeq ($(CONF_BUILD),windows)
ASM = @nasmw
EXE_BUILD = .exe
CC_BUILD = @gcc
LD_BUILD = @gcc
CXX_BUILD = @g++
LDXX_BUILD = @g++
AR = @ar
CC = @gcc
CXX = @g++
LD = @gcc
LDXX = @g++
TOUCH = @true
RC = @windres
# The "" are required, otherwise the backslash are removed
SDLCFLAGS = "-IC:\MINGW\INCLUDE\SDL"
SDLLIBS = -lSDL -mwindows
endif

endif


# Common
INSTALL_PROGRAM_DIR = $(INSTALL) -d -o root -g bin -m 755
INSTALL_MAN_DIR = $(INSTALL) -d -o root -g 0 -m 755
INSTALL_DATA_DIR = $(INSTALL) -d -o root -g bin -m 755
INSTALL_PROGRAM = $(INSTALL) -c -o root -g bin -m 555
INSTALL_MAN = $(INSTALL) -c -o root -g bin -m 444
INSTALL_DATA = $(INSTALL) -c -o root -g bin -m 644

#############################################################################
# Derived options

# Binaries
BINARYTAG = $(CONF_HOST)-$(CONF_SYSTEM)-$(CONF_ARCH)

# Some conversion
ifeq ($(CONF_HOST)-$(CONF_SYSTEM),dos-dos)
BINARYTAG = dos-native-$(CONF_ARCH)
endif
ifeq ($(CONF_HOST)-$(CONF_SYSTEM),unix-linux)
BINARYTAG = linux-native-$(CONF_ARCH)
endif
ifeq ($(CONF_HOST)-$(CONF_SYSTEM),unix-sdl)
BINARYTAG = linux-sdl-$(CONF_ARCH)
endif
BINARYDIR = $(CONF_HOST)/$(CONF_SYSTEM)/$(CONF_ARCH)
BINARYDIR_BUILD = $(CONF_BUILD)

# Checks
ifeq (,$(findstring $(CONF_HOST),-unix-dos-windows-))
$(error Invalid CONF_HOST=$(CONF_HOST))
endif
ifeq (,$(findstring $(CONF_SYSTEM),-linux-dos-sdl-))
$(error Invalid CONF_SYSTEM=$(CONF_SYSTEM))
endif
ifeq ($(CONF_HOST),unix)
ifeq (,$(findstring $(CONF_SYSTEM),-linux-sdl-))
$(error Unsupported CONF_SYSTEM=$(CONF_SYSTEM) for CONF_HOST=$(CONF_HOST))
endif
endif
ifeq ($(CONF_HOST),dos)
ifeq (,$(findstring $(CONF_SYSTEM),-dos-))
$(error Unsupported CONF_SYSTEM=$(CONF_SYSTEM) for CONF_HOST=$(CONF_HOST))
endif
endif
ifeq ($(CONF_HOST),windows)
ifeq (,$(findstring $(CONF_SYSTEM),-sdl-))
$(error Unsupported CONF_SYSTEM=$(CONF_SYSTEM) for CONF_HOST=$(CONF_HOST))
endif
endif

#############################################################################
# CFLAGS/LDFLAGS

# Override any environment CFLAGS/LDFLAGS declaration
CFLAGS = $(CONF_CFLAGS_ARCH) $(CONF_CFLAGS_OPT)
LDFLAGS = $(CONF_LDFLAGS)

ifeq ($(CONF_DEBUG),yes)
MSG = "(debug)"
else
MSG =
CFLAGS += -DNDEBUG
endif

#############################################################################
# EMU

# Emulator file name
EMUNAME = adv$(CONF_EMU)

# Emulator source directory. If it doesn't exist the emulator isn't compiled
ifeq ($(CONF_EMU),none)
EMUSRC=$(srcdir)/srcnone
endif
ifeq ($(CONF_EMU),mess)
EMUSRC=$(srcdir)/srcmess
endif
ifeq ($(CONF_EMU),pac)
EMUSRC=$(srcdir)/srcpac
endif
ifeq ($(EMUSRC),)
EMUSRC=$(srcdir)/src
endif

#############################################################################
# Advance

include $(srcdir)/advance/advance.mak

ifneq ($(wildcard $(EMUSRC)),)
include $(srcdir)/advance/emu.mak
endif
ifneq ($(wildcard $(srcdir)/advance/menu.mak),)
include $(srcdir)/advance/menu.mak
endif
ifneq ($(wildcard $(srcdir)/advance/cab.mak),)
include $(srcdir)/advance/cab.mak
endif
ifneq ($(wildcard $(srcdir)/advance/v.mak),)
include $(srcdir)/advance/v.mak
endif
ifneq ($(wildcard $(srcdir)/advance/cfg.mak),)
include $(srcdir)/advance/cfg.mak
endif
ifneq ($(wildcard $(srcdir)/advance/s.mak),)
include $(srcdir)/advance/s.mak
endif
ifneq ($(wildcard $(srcdir)/advance/k.mak),)
include $(srcdir)/advance/k.mak
endif
ifneq ($(wildcard $(srcdir)/advance/i.mak),)
include $(srcdir)/advance/i.mak
endif
ifneq ($(wildcard $(srcdir)/advance/j.mak),)
include $(srcdir)/advance/j.mak
endif
ifneq ($(wildcard $(srcdir)/advance/m.mak),)
include $(srcdir)/advance/m.mak
endif
ifneq ($(wildcard $(srcdir)/advance/line.mak),)
include $(srcdir)/advance/line.mak
endif
ifneq ($(wildcard $(srcdir)/advance/d2.mak),)
include $(srcdir)/advance/d2.mak
endif

#############################################################################
# Standard GNU targets

info:

dvi:

installcheck: install

check:

mostlyclean: distclean

maintainer-clear: distclean

clean:
	$(RM) -f -r obj

distclean: clean
	$(RM) -f config.status config.log

#############################################################################
# Special targets

flags: obj
	$(ECHO) CFLAGS=$(CFLAGS)
	$(ECHO) LDFLAGS=$(LDFLAGS)
	$(ECHO) CFLAGS_BUILD=$(CFLAGS_BUILD)
	$(ECHO) SDLCFLAGS=$(SDLCFLAGS)
	$(ECHO) SDLLIBS=$(SDLLIBS)
	$(ECHO) EMUCFLAGS=$(EMUCFLAGS)
	$(ECHO) EMULDFLAGS=$(EMULDFLAGS)
	$(ECHO) TARGETCFLAGS=$(TARGETCFLAGS)
	$(ECHO) TARGETLDFLAGS=$(TARGETLDFLAGS)
	$(ECHO) TARGETLIBS=$(TARGETLIBS)
	$(ECHO) SYSTEMCFLAGS=$(SYSTEMCFLAGS)
	$(ECHO) SYSTEMLDFLAGS=$(SYSTEMLDFLAGS)
	$(ECHO) SYSTEMLIBS=$(SYSTEMLIBS)
	$(ECHO) CC=$(CC)
	$(ECHO) CC_BUILD=$(CC_BUILD)
	$(ECHO) "int test(void) { return 0; }" > obj/flags.c
	$(CC) $(CFLAGS) obj/flags.c -S -fverbose-asm -o obj/flags.S

osdep:
	rgrep -r MSDOS $(srcdir)/advance
	rgrep -r WIN32 $(srcdir)/advance


